**Get it Done, Make it Better, Share the Best -- Talse**
**I). Two Pinter**
| O(T): O(n) | O(S): O(1) | Rt: 324ms | 
```python
    def canThreePartsEqualSum(self, A: List[int]) -> bool:
        total = sum(A)
        if total % 3: return False
        part = total // 3
        l, r = 0, len(A) - 1
        lsum = rsum = 0
        while lsum != part and l < len(A): lsum, l = lsum+A[l], l+1
        while rsum != part and r > l: rsum, r = rsum+A[r], r-1
        #when the while ends idealy, l and r are one step ahead respectively 
        return rsum == part and l <= r
```


**II). K Parts with Equal Sum**
| O(T): O(n) | O(S): O(1) | Rt: 344ms | 
```python
    def canThreePartsEqualSum(self, A: List[int]) -> bool:
        k, total = 3, sum(A)
        if total % k: return False
        part = total // k
        l, cursum, leng = 0, 0, len(A)
        while k-1:
            while cursum != part and l < leng: cursum, l = cursum + A[l], l + 1
            if cursum != part: return False
            cursum, k = 0, k-1
        return True
```
Alternative: pop style.  | Rt: 324ms |
```python
    def canThreePartsEqualSum(self, A: List[int]) -> bool:
        k, total = 3, sum(A)
        if total % k: return False
        part = total // k
        cursum = 0
        while k-1 and A:
            while cursum != part and A: cursum += A.pop()
            if cursum != part: return False
            cursum, k = 0, k - 1
        return bool(A)
```
Triple: counter style.  | Rt: 344ms |
```python
    def canThreePartsEqualSum(self, A: List[int]) -> bool:
        k, total = 3, sum(A)
        if total % k: return False
        part = total // k
        ct, cursum = 0, 0
        for i in A:
            if cursum != part: cursum += i
            else: 
                cursum, ct = i, ct + 1
                if ct == k - 1: return True
        return False
```


**III). Accumulate**
| O(T): O(n) | O(S): O(n) | Rt: 316ms | 
```python
    def canThreePartsEqualSum(self, A: List[int]) -> bool:
        k, total = 3, sum(A)
        if total % k: return False
        part = total // k
        accu = itertools.accumulate(A)
        return part in accu and 2 * part in accu
```
Comment: this solution may not be correct in some cases not cover by the test cases. 
Alternative: for n partition.  | Rt: 320ms |
```python
    def canThreePartsEqualSum(self, A: List[int]) -> bool:
        k, total = 3, sum(A)
        if total % k: return False
        part = total // k
        accu = itertools.accumulate(A)
        for i in range(1, k):
            if i * part not in accu: return False
        return True
```
Triple: naive accumulate.  | Rt: 328ms |
```python
    def canThreePartsEqualSum(self, A: List[int]) -> bool:
        total = sum(A)
        if total % 3: return False
        part = total // 3
        summ, flag = 0, False
        for i in A: 
            if summ == part: flag = True
            elif flag and summ == 2 * part: return True
            summ += i
        return False
```

