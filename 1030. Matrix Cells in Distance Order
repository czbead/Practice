**Get it Done, Make it Better, Share the Best -- Talse**
**I). Sort**
| O(T): O(mnlg(mn)) | O(S): O(1) | Rt: 184ms | 
```python
    def allCellsDistOrder(self, R: int, C: int, r0: int, c0: int) -> List[List[int]]:
        matrix = [(i, j) for i in range(R) for j in range(C)]
        matrix.sort(key=lambda x: abs(x[0] - r0) + abs(x[1] - c0))
        return matrix
```


**II). BFS - Set Update**
| O(T): O(mn) | O(S): O(mn) | Rt: 204ms | 
```python
    def allCellsDistOrder(self, R: int, C: int, r0: int, c0: int) -> List[List[int]]:
        setr, rst, st = set(), [], [(r0, c0)]
        while st: 
            rst.extend(st); setr.update(st)
            st = {(i, j) for x, y in st for i, j in [(x+1, y), (x-1, y), (x, y+1), (x, y-1)] 
                   if 0<=i<R and 0<=j<C and (i, j) not in setr}
        return rst
```


**III). BFS - BitMap**
| O(T): O(mn) | O(S): O(mn) | Rt: 224ms | 
```python
    def allCellsDistOrder(self, R: int, C: int, r0: int, c0: int) -> List[List[int]]:
        bitmap = [[0] * C for _ in range(R)]
        print(bitmap)
        rst, st = [], [(r0, c0)]
        while st: 
            rst.extend(st)
            for i, j in st: bitmap[i][j] = 1
            st = {(i, j) for x, y in st for i, j in [(x+1, y), (x-1, y), (x, y+1), (x, y-1)] 
                   if 0<=i<R and 0<=j<C and bitmap[i][j] == 0}
        return rst
```


**IV). Dict**
| O(T): O(mn) | O(S): O(mn) | Rt: 160ms | 
```python
    def allCellsDistOrder(self, R: int, C: int, r0: int, c0: int) -> List[List[int]]:
        rst, dt = [], collections.defaultdict(list)
        for i in range(R):
            for j in range(C):
                dis = abs(i-r0) + abs(j-c0)
                dt[dis].append((i, j))
        maxdis = max(r0, R-r0) + max(c0, C-c0)
        for i in range(maxdis + 1): rst += dt[i]
        return rst
```

Others: Java Counting Sort -- https://leetcode.com/problems/matrix-cells-in-distance-order/discuss/278986/4ms-O(n)-Java-Counting-Sort-()-Solution

