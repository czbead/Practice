**Get it Done, Make it Better, Share the Best -- Talse**
**I). Sort**
| O(T): O(nlgn) | O(S): O(n) | Rt: 36ms | 
```python
    def heightChecker(self, heights: List[int]) -> int:
        return sum(i != j for i, j in zip(heights, sorted(heights)))
```


**II). Counting Sort**
| O(T): O(n) | O(S): O(1) | Rt: 40ms | 
```python
    def heightChecker(self, heights: List[int]) -> int:
        m = [0] * 100
        for i in heights: m[i-1] += 1
        h = [j for i, v in enumerate(m) if v for j in [i+1] * v ]
        return sum(i != j for i, j in zip(heights, h))
```
Alternative: count in the run.  | Rt: 36ms |
```python
    def heightChecker(self, heights: List[int]) -> int:
        m = [0] * 100
        for i in heights: m[i-1] += 1
        rst = cur = 0
        for i in heights:
            while cur < 100 and m[cur] == 0: cur += 1
            if i != cur + 1: rst += 1
            m[cur] -= 1
        return rst
```
Referrence: https://leetcode.com/problems/height-checker/discuss/300472/Java-0ms-O(n)-solution-no-need-to-sort
