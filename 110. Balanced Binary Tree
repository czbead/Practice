**Get it Done, Make it Better, Share the Best -- Talse**
**I). Recursion with Explicit State**
| O(t): O(n) | O(m): O(1) | Rt: 44ms | 
```python
    def isBalanced(self, root: TreeNode) -> bool:
        def dfs(n):
            if not n: return 0
            l = dfs(n.left) + 1
            r = dfs(n.right) + 1
            if abs(l - r) > 1: self.balance = False
            return max(l, r)
        
        self.balance = True
        dfs(root)
        return self.balance
```
Comment: **the program needs to handle two things: the depths from both childs and balance check. However, a recursion function once can only return one state in a time.** The balance check is the final result we want but the check is decided by the depth offset (depth derived from left child and depth derived from right child). It is not hard to understand **the depth is prerequisite for further balance judgement.** Therefore, the recursion function should take care of depth calculation which forces coders to initialize another state variable to keep track of the depth offsets (balance status).
For most recursion senarioes, the result of recursion function is exactly what we want or a decider on what we want. This is a very good problem which the result of recursion function is not we want.
A good question to ask is: **Could we break out of the recursion during the process once we are sure the tree is not balanced?**


**II). Recursion with Implicit State**
| O(t): O(n) | O(m): O(1) | Rt: 44ms | 
```python
    def isBalanced(self, root: TreeNode) -> bool:
        def dfs(n):
            if not n: return 0
            l = dfs(n.left) 
            r = dfs(n.right) 
            if l == -1 or r == -1 or abs(l - r) > 1: return -1
            else: return 1 + max(l, r)
        return dfs(root) != -1
```
Referrence: https://leetcode.com/problems/balanced-binary-tree/discuss/35708/VERY-SIMPLE-Python-solutions-(iterative-and-recursive)-both-beat-90


Others: there is a postorder iterative solution. I give up on it because it is really not a good choice for this problem (strict depth-oriented rather breadth-oriented). 
if you are interested, here are the posts that maybe helpful.
Referrence: https://leetcode.com/problems/balanced-binary-tree/discuss/128678/Python-3-iterative-and-recursive-solution;
https://leetcode.com/problems/balanced-binary-tree/discuss/35708/VERY-SIMPLE-Python-solutions-(iterative-and-recursive)-both-beat-90
