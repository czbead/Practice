**Get it Done, Make it Better, Share the Best -- Talse**
**I). Claim Your Candie**
| O(T): O(sqrt(C)) | O(S): O(1) | Rt: 40ms |
note: C denotes candies 
```python
    def distributeCandies(self, candies: int, num_people: int) -> List[int]:
        rst = [0] * num_people
        cur, i = 1, 0
        while candies:
            candies -= cur
            rst[i] += cur
            i = (i+1) % num_people
            cur = min(candies, cur + 1)
        return rst
```
Comment: we didn't use i instead of cur as the index cursor because the last cur is a edge case (it has nothing to do with the real index).
Alternative: | Rt: 40ms |
```python
    def distributeCandies(self, candies: int, num_people: int) -> List[int]:
        i, rst = 0, [0] * num_people
        while candies > 0:
            rst[i%num_people] += min(i+1, candies)
            i, candies = i+1, candies-(i+1)
        return rst
```


**II). Get the Sequence**
| O(T): O(sqrt(C)) | O(S): O(1) | Rt: 32ms | 
```python
    def distributeCandies(self, candies: int, num_people: int) -> List[int]:
        rst = [0] * num_people
        n = int(((1 + 8 * candies) ** 0.5 - 1) / 2)
        for i in range(1, n+1): rst[(i-1) % num_people] += i
        #actually, the index = ((n+1) - 1) % num_people
        rst[n%num_people] += candies - (n+1)*n//2
        return rst
```
Comment: what did it save? this solution saves tons of min operation which is unnecessary. 


