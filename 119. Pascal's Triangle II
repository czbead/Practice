**Get it Done, Make it Better, Share the Best -- Talse**
**I). Zip Simulate**
| O(t): O(n*n) | O(m): O(n) | Rt: 28ms | 
```python
    def getRow(self, rowIndex: int) -> List[int]:
        base = [1]
        for _ in range(rowIndex):
            base = [1] + [x + y for x, y in zip(base, base[1:])] + [1]
        return base
```


**II). Adjacent Add**
| O(t): O(n*n) | O(m): O(n) | Rt: 32ms | 
```python
    def getRow(self, rowIndex: int) -> List[int]:
        base = [1]
        for i in range(rowIndex):
            base = [1] + [base[j] + base[j+1] for j in range(i)] + [1]
        return base
```
Referrence: https://leetcode.com/problems/pascals-triangle-ii/discuss/38629/My-simple-Python-solution

**III). Rotate Add**
| O(t): O(n*n) | O(m): O(n) | Rt: 24ms | 
```python
    def getRow(self, rowIndex: int) -> List[int]:
        # if not rowIndex: return [1]
        base = [1]
        for i in range(rowIndex):
            base = [x + y for x, y in zip([0]+base, base+[0])]
        return base
```
Referrence: https://leetcode.com/problems/pascals-triangle-ii/discuss/38467/Very-simple-Python-solution
