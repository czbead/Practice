**Get it Done, Make it Better, Share the Best -- Talse**
**I). Brute Force with Boundary Check**
| O(T): O(n*n) | O(S): O(1) | Rt: 24ms | 
```python
    def findSolution(self, customfunction: 'CustomFunction', z: int) -> List[List[int]]:
        rst = []
        for i in range(1, z+1):
            for j in range(1, z+1):
                cur = customfunction.f(i, j)
                if cur > z: break
                elif cur == z: rst.append((i, j))
        return rst
```
alternative:  | Rt: 28ms |
```python
    def findSolution(self, customfunction: 'CustomFunction', z: int) -> List[List[int]]:
        rst = []
        for i in range(1, z+1):
            if customfunction.f(i, 1) > z: break
            if customfunction.f(i, z) < z: break
            for j in range(1, z+1):
                cur = customfunction.f(i, j)
                if cur > z: break
                elif cur == z: rst.append((i, j))
        return rst
```


**II). Binary Search with Boundary Check**
| O(T): O(nlgn) | O(S): O(1) | Rt: 32ms | 
```python
    def findSolution(self, customfunction: 'CustomFunction', z: int) -> List[List[int]]:
        rst = []
        for i in range(1, z+1):
            l, r = 1, z
            if customfunction.f(i, 0) > z: break
            if customfunction.f(i, z) < z: break
            while l <= r:
                mid = l + (r-l) // 2
                fmid = customfunction.f(i, mid)
                if fmid < z: l = mid + 1
                elif fmid > z: r = mid - 1
                else: rst.append((i, mid)); break
        return rst
```


**III). Two Pointer**
| O(T): O(n) | O(S): O(1) | Rt: 28ms | 
```python
    def findSolution(self, customfunction: 'CustomFunction', z: int) -> List[List[int]]:
        rst = []
        l, r = 1, z
        while l <= z and r > 0:
            cur = customfunction.f(l, r)
            if cur < z: l += 1
            elif cur > z: r -= 1
            else: 
                rst.append((l, r))
                l, r = l+1, r-1
        return rst
```
Alternative:  | Rt: 20ms |
```python
    def findSolution(self, customfunction: 'CustomFunction', z: int) -> List[List[int]]:
        rst, r = [], z
        for i in range(1, z+1):
            while r > 0 and customfunction.f(i, r) > z: r -= 1
            if r <= 0: break
            #if == z: append to rst and continue; else < z: continue
            if customfunction.f(i, r) == z: rst.append((i, r))
        return rst
```
Triple: safe boundary. | Rt: 28ms |
```python
    def findSolution(self, customfunction: 'CustomFunction', z: int) -> List[List[int]]:
        rst, r = [], z
        for i in range(1, z+1):
            if customfunction.f(i, 1) > z: break
            while r > 1 and customfunction.f(i, r) > z: r -= 1
            if customfunction.f(i, r) == z: rst.append((i, r))
        return rst
```
Referrence: idea from https://leetcode.com/problems/find-positive-integer-solution-for-a-given-equation/discuss/414249/JavaC%2B%2BPython-O(X%2BY)
