**Get it Done, Make it Better, Share the Best -- Talse**
**I). Naive**
| O(T): O(n) | O(S): O(1) | Rt: 88ms | 
```python
    def findSpecialInteger(self, arr: List[int]) -> int:
        pre, ct, thres = arr[0], 0, int(len(arr) // 4)
        for i in arr:
            if i == pre: ct += 1
            else: 
                if ct > thres: return pre
                ct, pre = 1, i
        return pre    #garanteed an answer existed
```
Comment: a previous state with a counter. 

Alternative: a pointer with a counter. | Rt: 92ms |
```python
    def findSpecialInteger(self, arr: List[int]) -> int:
        ct, l = 1, len(arr)
        thres = int(l // 4)
        for i in range(l-1):
            if arr[i+1] == arr[i]: ct += 1
            else: 
                if ct > thres: return arr[i]
                ct = 1
        return arr[-1]  
``` 

Triple: two pointers.  | Rt: 96ms |
```python
    def findSpecialInteger(self, arr: List[int]) -> int:
        pre, l = 0, len(arr)
        thres = int(l // 4)
        for i in range(l):
            if arr[i] != arr[pre]:
                if i - pre > thres: return arr[pre]
                pre = i
        return arr[-1]
```


**II). Sliding Window**
| O(T): O(n) | O(S): O(1) | Rt: 88ms | 
```python
    def findSpecialInteger(self, arr: List[int]) -> int:
        gap = len(arr) // 4
        for i in range(len(arr) - gap):
            if arr[i] == arr[i + gap]: return arr[i]
        return arr[-1]
```
Referrence: idea from https://leetcode.com/problems/element-appearing-more-than-25-in-sorted-array/discuss/451249/Simple-Java-Solution-O(n)-time-O(1)-space


**III). Binary Search**
| O(T): O(lgn) | O(S): O(1) | Rt: 96ms | 
```python
    def findSpecialInteger(self, arr: List[int]) -> int:
        st = len(arr) // 4
        if st == 0: return arr[0]
        for i in range(st, len(arr), st):
            if bisect.bisect(arr, arr[i]) - bisect.bisect_left(arr, arr[i]) > st: return arr[i]
        return arr[-1]
```
Referrence: the idea is from https://leetcode.com/problems/element-appearing-more-than-25-in-sorted-array/discuss/451286/Java-Binary-Search

Alternative: self-implement lower_bound and upper_bound Binary Search.  | Rt: 88ms |
```python
    def findSpecialInteger(self, arr: List[int]) -> int:
        def bs_hi(lst, tar):
            l, r = 0, len(lst)
            while l < r:
                m = l + (r-l) // 2
                if lst[m] <= tar: l = m + 1
                else: r = m
            return l
            
        def bs_lw(lst, tar):
            l, r = 0, len(lst)
            while l < r:
                m = l + (r-l) // 2
                if lst[m] < tar: l = m + 1
                else: r = m
            return l
        
        st = len(arr) // 4
        if st == 0: return arr[0]
        for i in range(st, len(arr), st):
            if bs_hi(arr, arr[i]) - bs_lw(arr, arr[i]) > st: return arr[i]
        return arr[-1]
```

Triple: merge two in one.  | Rt: 80ms |
```python
    def findSpecialInteger(self, arr: List[int]) -> int:
        def bs(lst, tar, left):
            l, r = 0, len(lst)
            while l < r:
                m = l + (r-l) // 2
                if lst[m] < tar: l = m + 1
                elif not left and lst[m] == tar: l = m + 1 
                else: r = m
            return l if left else r
        
        st = len(arr) // 4
        if st == 0: return arr[0]
        for i in range(st, len(arr), st):
            if bs(arr, arr[i], False) - bs(arr, arr[i], True) > st: return arr[i]
        return arr[-1]
```

