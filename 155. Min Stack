**Get it Done, Make it Better, Share the Best -- Talse**
**I). List of Tuple**
| O(t): O(1) | O(m): O(n) | Rt: 64ms | 
```python
class MinStack:
    def __init__(self):
        self.lst = []

    def push(self, x: int) -> None:
        if not self.lst or x < self.lst[-1][1]: self.lst.append((x, x))
        else: self.lst.append((x, self.lst[-1][1]))

    def pop(self) -> None:
        if self.lst: self.lst.pop()

    def top(self) -> int:
        if self.lst: return self.lst[-1][0]

    def getMin(self) -> int:
        if self.lst: return self.lst[-1][1]
```


**II). Queue of Tuple**
| O(t): O(1) | O(m): O(n) | Rt: 64ms | 
```python
class MinStack:
    def __init__(self):
        self.q = collections.deque([])

    def push(self, x: int) -> None:
        if not self.q: self.q.appendleft((x, x))
        else: self.q.appendleft((x, min(self.q[0][1], x)))

    def pop(self) -> None:
        if self.q: self.q.popleft()

    def top(self) -> int:
        if self.q: return self.q[0][0]

    def getMin(self) -> int:
        if self.q: return self.q[0][1]
```


**III). Flat**
| O(t): O(1) | O(m): O(n) | Rt: 56ms | 
```python
class MinStack:
    def __init__(self):
        self.lst = []

    def push(self, x: int) -> None:
        if not self.lst: 
            self.lst.append(x)
            self.lst.append(x)
        else: 
            self.lst.append(x)
            self.lst.append(min(x, self.lst[-2]))

    def pop(self) -> None:
        if self.lst: 
            self.lst.pop()
            self.lst.pop()

    def top(self) -> int:
        if self.lst: return self.lst[-2]

    def getMin(self) -> int:
        if self.lst: return self.lst[-1]
```
Referrence: https://leetcode.com/problems/min-stack/discuss/201044/Python-single-stack-O(1)-all-operations
