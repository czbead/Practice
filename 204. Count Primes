**Get it Done, Make it Better, Share the Best -- Talse**
**I). Sieve**
| O(t): O(nsqrt(n)) | O(m): O(n) | Rt: 364ms | 
```python
    def countPrimes(self, n: int) -> int:
        #0-based ps[1] means where 1 is a prime
        if n < 3: return 0
        ps = [1] * n
        ps[0] = ps[1] = 0
        for i in range(2, int(n ** 0.5) + 1):
            if ps[i] == 0: continue 
            for j in range(i*i, n, i):
                ps[j] = 0
        return sum(ps)
```
Referrence: https://leetcode.com/problems/count-primes/discuss/57595/Fast-Python-Solution
Alternative: 2X faster version. | Rt: 208ms |
```python
    def countPrimes(self, n: int) -> int:
        #0-based ps[1] means where 1 is a prime
        if n < 3: return 0
        ps = [1] * n
        ps[0] = ps[1] = 0
        for i in range(2, int(n ** 0.5) + 1):
            if ps[i] == 0: continue
            ps[i*i:n:i] = [0] * len(ps[i*i:n:i])
        return sum(ps)
```
Triple: 3X faster version. | Rt: 124ms |
```python
    def countPrimes(self, n: int) -> int:
        #0-based ps[1] means where 1 is a prime
        if n < 3: return 0
        ps = [1] * n
        ps[0] = ps[1] = 0
        for i in range(2, int(n ** 0.5) + 1):
            if ps[i] == 0: continue
            ps[i*i:n:i] = [0] * ((n-1-i*i) // i + 1)
        return sum(ps)
```
Referrence: https://leetcode.com/problems/count-primes/discuss/153528/Python3-99-112-ms-Explained%3A-The-Sieve-of-Eratosthenes-with-optimizations
