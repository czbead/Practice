**Get it Done, Make it Better, Share the Best -- Talse**
**I). Counter**
| O(t): O(n) | O(m): O(n) | Rt: 36ms | 
```python
    def isAnagram(self, s: str, t: str) -> bool:
        ct = collections.Counter
        return ct(s) == ct(t)
```
Similar: using your own counter implementation or using count which is less efficient.


**II). One Dict**
| O(t): O(n) | O(m): O(n) | Rt: 56ms | 
```python
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len(t): return False
        dt = {}
        for i in s:
            dt[i] = dt.get(i, 0) + 1
        for i in t:
            if i not in dt or dt[i] == 0: return False
            dt[i] -= 1
        return True
```


**III). Limited State Machine**
| O(t): O(n) | O(m): O(1) | Rt: 52ms | 
```python
    def isAnagram(self, s: str, t: str) -> bool:
        state = [0] * 26
        for i in s:
            state[ord(i) - ord('a')] += 1
        for i in t:
            state[ord(i) - ord('a')] -= 1
        return not any(state)
```


**IV). Sort**
| O(t): O(nlgn) | O(m): O(n) | Rt: 48ms | 
```python
    def isAnagram(self, s: str, t: str) -> bool:
        return sorted(s) == sorted(t)
```