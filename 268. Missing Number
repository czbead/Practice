**Get it Done, Make it Better, Share the Best -- Talse**
**I). Sum Subtract**
| O(t): O(n) | O(m): O(1) | Rt: 128ms | 
```python
    def missingNumber(self, nums: List[int]) -> int:
        l = len(nums)
        return (1 + l) * l // 2 - sum(nums)
```
Comment: this solution is obvious because of the "Strong rule" in the number list context. However, the sum solution is not safe because the sum can overflow in theory.
Alternative: overflow safe sum solution. | Rt: 148ms |
```python
    def missingNumber(self, nums: List[int]) -> int:
        summ = len(nums)
        for i, v in enumerate(nums):
            summ += i
            summ -= v
        return summ
```


**II). Sort**
| O(t): O(nlgn) | O(m): O(1) | Rt: 144ms | 
```python
    def missingNumber(self, nums: List[int]) -> int:
        nums.sort()
        for i, v in enumerate(nums):
            if v != i: return i
        return len(nums)
```


**III). Limited State Machine**
| O(t): O(n) | O(m): O(n) | Rt: 144ms | 
```python
    def missingNumber(self, nums: List[int]) -> int:
        l = len(nums)
        n = [-1] * (l+1)
        for i in nums:
            n[i] = 1
        return n.index(-1)
```


**IV). Practice Binary Search**
| O(t): O(nlgn) | O(m): O(1) | Rt: 152ms | 
```python
    def missingNumber(self, nums: List[int]) -> int:
        nums.sort()
        l, r = 0, len(nums)
        while l < r:
            mid = (l + r) // 2
            if nums[mid] > mid: r = mid
            else: l = mid+1
        return l
```
Referrence: https://leetcode.com/problems/missing-number/discuss/69786/3-different-ideas%3A-XOR-SUM-Binary-Search.-Java-code
Comment: I like this solution very much.
Alternative: | Rt: 144ms |
```python
    def missingNumber(self, nums: List[int]) -> int:
        nums.sort()
        l, r = 0, len(nums)-1
        while l <= r:
            mid = (l + r) // 2
            if nums[mid] > mid: r = mid-1
            else: l = mid+1
        return l
```


**V). Set Subtract**
| O(t): O(n) | O(m): O(n) | Rt: 144ms | 
```python
    def missingNumber(self, nums: List[int]) -> int:
        return (set(range(len(nums) + 1)) - set(nums)).pop()
```


**VI). XOR**
| O(t): O(n) | O(m): O(1) | Rt: 144ms | 
```python
    def missingNumber(self, nums: List[int]) -> int:
        xor = 0 ^ len(nums)
        for i, v in enumerate(nums):
            xor ^= i
            xor ^= v
        return xor
```
Comment: any number appear twice except the number missedl, perfect for XOR feature.


**VII). Swap**
| O(t): O(n*n) | O(m): O(1) | Rt: 156ms | 
note: not sure about the time complexity 
```python
    def missingNumber(self, nums: List[int]) -> int:
        l = len(nums)
        for i in range(l):
        	#swap until you get the right value in current position
            while nums[i] != i and nums[i] < l: 
                # nums[i], nums[nums[i]] = nums[nums[i]], nums[i], will lead to list assignment out of range error
                tmp = nums[nums[i]]
                nums[nums[i]] = nums[i]
                nums[i] = tmp
        for i, v in enumerate(nums):
            if i != v: return i
        return l
```
Referrence: https://leetcode.com/problems/missing-number/discuss/69786/3-different-ideas:-XOR-SUM-Binary-Search.-Java-code/71849
Question: Is there a O(n) swap sorting solution? It feels like there should have one existed because the list is so special. 
