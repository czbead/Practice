**Get it Done, Make it Better, Share the Best -- Talse**
**I). Counter & Counter**
| O(t): O(n) | O(m): O(n) | Rt: 36ms | 
```python
    def getHint(self, secret: str, guess: str) -> str:
        s, g = collections.Counter(secret), collections.Counter(guess)
        both = sum((s & g).values())
        a = sum(i == j for i, j in zip(secret, guess))
        return f'{a}A{both - a}B'
```
Alternative: | O(t): O(n*n) | O(m): O(1) | Rt: 48ms | 	
```python
    def getHint(self, secret: str, guess: str) -> str:
        a = sum(i == j for i, j in zip(secret, guess))
        bo = sum(min(secret.count(i), guess.count(i)) for i in set(guess))
        return f'{a}A{bo - a}B'
```


**II). Two Dict**
| O(t): O(n) | O(m): O(n) | Rt: 32ms | 
```python
    def getHint(self, secret: str, guess: str) -> str:
        a, b, ds, dg = 0, 0, {}, {}
        for i, j in zip(secret, guess):
            if i == j: a += 1
            else: 
                ds[i] = ds.get(i, 0) + 1
                dg[j] = dg.get(j, 0) + 1
        common = ds.keys() & dg.keys()
        for k in common:
            b += min(ds[k], dg[k])
        return f'{a}A{b}B'
```


**III). Two List**
| O(t): O(n) | O(m): O(1) | Rt: 40ms | 
```python
    def getHint(self, secret: str, guess: str) -> str:
        a, b, n1, n2, base = 0, 0, [0] * 10, [0] * 10, ord('0')
        for i, j in zip(secret, guess):
            if i == j: a += 1
            else: 
                n1[ord(i) - base] += 1
                n2[ord(j) - base] += 1
        for i, j in zip(n1, n2):
            b += min(i, j)
        return f'{a}A{b}B'
```


**IV). One List**
| O(t): O(n) | O(m): O(1) | Rt: 44ms | 
```python
    def getHint(self, secret: str, guess: str) -> str:
        a, b, m = 0, 0, [0] * 10
        sg = [(int(i), int(j)) for i, j in zip(secret, guess)]
        for i, j in sg:
            if i == j: a += 1
            else:
                if m[i] < 0: b += 1
                if m[j] > 0: b += 1
                m[i] += 1
                m[j] -= 1
        return f'{a}A{b}B'
```
Referrence: https://leetcode.com/problems/bulls-and-cows/discuss/74621/One-pass-Java-solution
Analysis: here only has one list, and to distinguish two operators (i, j), i and j head towards different directions. If the initial state of a position is contradicted with a operator's direction, there must be a counterpart operation conducted before, then a pair is successfully detected. This is genius thought!
