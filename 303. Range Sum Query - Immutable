**Get it Done, Make it Better, Share the Best -- Talse**
**I). Sums**
| O(t): O(n) | O(m): O(n) | Rt: 76ms | 
```python
    def __init__(self, nums: List[int]):
        self.sums = [0] + nums
        for i in range(1, len(self.sums)):
            self.sums[i] += self.sums[i - 1]

    def sumRange(self, i: int, j: int) -> int:
        return self.sums[j + 1] - self.sums[i]
```
Comment; The leading redundant 0 helps a lot in this context (prevent edge case).
Alternative: growing manner | Rt: 80ms |
```python
    def __init__(self, nums: List[int]):
        self.sums = [0] 
        for n in nums: 
            self.sums.append(n + self.sums[-1])

    def sumRange(self, i: int, j: int) -> int:
        return self.sums[j + 1] - self.sums[i]
```
Referrence: https://leetcode.com/problems/range-sum-query-immutable/discuss/75184/5-lines-C%2B%2B-4-lines-Python


**II). Itertools-accumulate**
| O(t): O(n) | O(m): O(n) | Rt: 72ms | 
```python
    def __init__(self, nums: List[int]):
        self.sums = [0, *itertools.accumulate(nums)] 

    def sumRange(self, i: int, j: int) -> int:
        return self.sums[j + 1] - self.sums[i]
```


