**Get it Done, Make it Better, Share the Best -- Talse**
**I). Loop**
| O(t): O(lgn) | O(m): O(1) | Rt: 32ms | 
```python
    def isPowerOfFour(self, num: int) -> bool:
        while num > 0 and num % 4 == 0:
            num //= 4
        return num == 1
```


**II). Recursion**
| O(t): O(lgn) | O(m): O(1) | Rt: 28ms | 
```python
    def isPowerOfFour(self, num: int) -> bool:
        if num < 1: return False
        elif num == 1: return True
        return num % 4 == 0 and self.isPowerOfFour(num // 4)
```


**III). Exhaustive Method**
| O(t): O(lgn) | O(m): O(1) | Rt: 44ms | 
```python
    def isPowerOfFour(self, num: int) -> bool:
        if num < 1: return False
        st, a = 1, set()
        while st < 0x80000000:
            a.add(st)
            st *= 4
        return num in a 
```


**IV). Log**
| O(t): O(1) | O(m): O(1) | Rt: 28ms | 
```python
    def isPowerOfFour(self, num: int) -> bool:
        return num > 0 and math.log(num, 2) % 2 == 0
```	
Alternative: | Rt: 32ms |
```python
    def isPowerOfFour(self, num: int) -> bool:
        return num > 0 and math.log(num, 4) % 1 == 0
```
Triple: | Rt: 28ms |
```python
    def isPowerOfFour(self, num: int) -> bool:
        return num > 0 and math.log(num, 4).is_integer()
```


**V). Binary**
| O(t): O(lgn) | O(m): O(1) | Rt: 24ms | 
```python
    def isPowerOfFour(self, num: int) -> bool:
        binary = bin(num)
        return num > 0 and len(binary) % 2 == 1 and binary.count('1') == 1
```
Comment: to check whether a number is odd, you can also use bit manipulation here: **len(binary) & 1 **
Alternative: | Rt: 32ms |
```python
    def isPowerOfFour(self, num: int) -> bool:
        return num > 0 and num & (num - 1) == 0 and len(bin(num)) % 2 == 1
```
Comment: num & (num-1) == 0 ensures num must be power of 2 (or say its binary representation only has one leading 1)


**VI). Masking**
| O(t): O(1) | O(m): O(1) | Rt: 24ms | 
```python
    def isPowerOfFour(self, num: int) -> bool:
        return num > 0 and num & (num - 1) == 0 and num & (0x55555555)
```
Referrence: https://leetcode.com/problems/power-of-four/discuss/80457/Java-1-line-(cheating-for-the-purpose-of-not-using-loops)
Comment: the 0x55555555 is "0101 0101 0101 0101 0101 0101 0101 0101" in binary. It works as the masking which will filter out the odd position 1s.


**VII). Mod 3**
| O(t): O(1) | O(m): O(1) | Rt: 28ms | 
```python
    def isPowerOfFour(self, num: int) -> bool:
        return num > 0 and num & (num - 1) == 0 and (num - 1) % 3 == 0
```
Referrence: https://leetcode.com/problems/power-of-four/discuss/80460/1-line-C%2B%2B-solution-without-confusing-bit-manipulations
Comment: tricky math solution. **The critical point of most solutions is that first check power of 2 then distinguish power of 2 with power of 4. To check power of 2, undoubtly n * (n-1) works like a magic. To distinguish power of 2 and power of 4, odd length is most common-used, or odd position leading 1 (masking), or this mathematic trick. **
