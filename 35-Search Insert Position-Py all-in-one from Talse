**Get it Done, Make it Better, Share the Best -- Talse**
**I). Binary Search (Lower Bound)**
| O(t): O(lgn) | O(m): O(1) | Rt: 48ms | 
notes: code works for arrays with duplicates as well.
```python
    def searchInsert(self, nums: List[int], target: int) -> int:
        l, r = 0, len(nums) - 1
        if target > nums[-1]: return len(nums)
        while l < r:
            mid = (l + r) // 2
            if nums[mid] < target: l = mid + 1
            else: r = mid
        return l
```
Comment: a standard binary search with a right overflow check. Actually, this is a self-implemented bisect_left function

**II). Only for Fun**
| O(t): O(lgn) | O(m): O(1) | Rt: 48ms | 
```python
    def searchInsert(self, nums: List[int], target: int) -> int:
        return bisect.bisect_left(nums, target)
```

**III). For Fun**
| O(t): O(n) | O(m): O(1) | Rt: 48ms | 
```python
    def searchInsert(self, nums: List[int], target: int) -> int:
        return sum(i < target for i in nums)
```

Bonus: Here is an all-dimension illustration with Binary Search (lower bound, upper bound). 
Link: <iframe src="https://leetcode.com/playground/WjER6cDq/shared" frameBorder="0" width="400" height="300"></iframe>
