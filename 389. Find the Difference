**Get it Done, Make it Better, Share the Best -- Talse**
**I). Counter Subtract**
| O(T): O(n+m) | O(S): O(m+n) | Rt: 32ms | 
note: well, the time complexity could be O(n) depends on how will you interprete it 
```python
    def findTheDifference(self, s: str, t: str) -> str:
        ct = collections.Counter
        return next(iter(ct(t) - ct(s))) 
```
Comment: 
```python
return list(ct(t) - ct(s))[0] 
```
works as well, but significantly slower (| Rt: 44ms |). 


**II). One Dict**
| O(T): O(n+m) | O(S): O(n) | Rt: 52ms | 
```python
    def findTheDifference(self, s: str, t: str) -> str:
        dt = {}
        for i in s: dt[i] = dt.get(i, 0) + 1
        for i in t:
            dt[i] = dt.get(i, 0) - 1
            if dt[i] < 0: return i
        return 
```


**III). Limited State**
| O(T): O(n + m) | O(S): O(1) | Rt: 36ms | 
```python
    def findTheDifference(self, s: str, t: str) -> str:
        base, a = ord('a'), [0] * 26
        for i in s: a[ord(i) - base] += 1
        for i in t: 
            ind = ord(i) - base
            if a[ind] <= 0: return i
            a[ind] -= 1
```


**IV). Count**
| O(T): O(n * (n + m)) | O(S): O(1) | Rt: 24ms | 
```python
    def findTheDifference(self, s: str, t: str) -> str:
        return next(i for i in t if t.count(i) > s.count(i))
```


**V). XOR**
| O(T): O(m+n) | O(S): O(m+n) | Rt: 24ms | 
```python
    def findTheDifference(self, s: str, t: str) -> str:
        xor = 0
        for i in s+t: xor ^= ord(i)
        return chr(xor)
```
Comment: transfer this problem to a "find unique" problem. Very good solution. 
Alternative: to save space.  | O(T): O(n) | O(S): O(1) | Rt: 48ms | 
```python
    def findTheDifference(self, s: str, t: str) -> str:
        xor = 0
        for i, v in enumerate(s): 
            xor ^= ord(v)
            xor ^= ord(t[i])
        xor ^= ord(t[-1]) 
        return chr(xor)
```


**VI). Sum Diff**
| O(T): O(m+n) | O(S): O(m+n) | Rt: 24ms | 
```python
    def findTheDifference(self, s: str, t: str) -> str:
        return chr(sum(map(ord, t)) - sum(map(ord, s)))
```
Referrence: https://leetcode.com/problems/find-the-difference/discuss/86850/Simple-JAVA-8ms-solution-4-lines
Comment: another great example of "Problem Transfermation"
Alternative: | Rt: 32ms |
```python
    def findTheDifference(self, s: str, t: str) -> str:
        summ = 0
        for i, j in zip(t, s):
            summ += ord(i)
            summ -= ord(j)
        return chr(summ + ord(t[-1]))
```

Others: there are some sort-based solutions, not as good as these though. 

