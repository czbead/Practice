**Get it Done, Make it Better, Share the Best -- Talse**
**I). Simulation**
| O(T): O(sqrt(n)) | O(S): O(1) | Rt: 836ms | 
```python
    def arrangeCoins(self, n: int) -> int:
        rst = cur = 0
        while cur <= n:
            rst += 1
            cur += rst
        return rst - 1
```
Alternative: better version. | Rt: 892ms |
```python
    def arrangeCoins(self, n: int) -> int:
        rst = 0
        while n >= 0:
            rst += 1
            n -= rst
        return rst - 1
```
Referrence: https://leetcode.com/problems/arranging-coins/discuss/92274/JAVA-Clean-Code-with-Explanations-and-Running-Time-2-Solutions/96807



**II). Binary Search**
| O(T): O(lgn) | O(S): O(1) | Rt: 36ms | 
```python
    def arrangeCoins(self, n: int) -> int:
        l, r = 0, n
        #range [l, r), left bound included, right bound excluded
        while l < r:
        	#tilt toward the right bound, get it covered
            mid = l + (r - l + 1) // 2
            #you cannot exclude mid - 1
            if mid / 2 > n / (mid + 1): r = mid - 1
            else: l = mid
        return l
```


**III). Math Solution**
| O(T): O(1) | O(S): O(1) | Rt: 28ms | 
```python
    def arrangeCoins(self, n: int) -> int:
        return int((math.sqrt(1 + 8 * n) - 1) * 0.5)
```

Others: I think there is a Newton's method solution as well. 

