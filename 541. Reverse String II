**Get it Done, Make it Better, Share the Best -- Talse**
**I). Range with Step**
| O(T): O(n) | O(S): O(k) | Rt: 20ms | 
```python
    def reverseStr(self, s: str, k: int) -> str:
        return ''.join([s[i: i+k][::-1] + s[i+k: i+2*k] for i in range(0, len(s), 2*k )])
```
Alternative: | Rt: 24ms |
```python
    def reverseStr(self, s: str, k: int) -> str:
        if len(s) < k: return s[::-1]
        chunks = [s[i: i+k] for i in range(0, len(s), k)]
        for i in range(0, len(chunks), 2): chunks[i] = chunks[i][::-1]
        return ''.join(chunks)
```


**II). In-place Two Pointer with Range Control**
| O(T): O(n) | O(S): O(1) | Rt: 32ms | 
```python
    def reverseStr(self, s: str, k: int) -> str:
        s = list(s)
        for i in range(0, len(s), 2*k):
            l, r = i, i + k - 1
            while l < r:
                if r >= len(s): r -= 1
                else:
                    s[l], s[r] = s[r], s[l]
                    l, r = l+1, r-1
        return ''.join(s)
```
Alternative: pythonic in-place replacement. | Rt: 32ms | O(S): O(n) |
```python
    def reverseStr(self, s: str, k: int) -> str:
        s = list(s)
        for i in range(0, len(s), 2*k): 
            s[i: i + k] = reversed(s[i: i + k])
        return ''.join(s)
```
Triple: conciser two pointer. | Rt: 36ms |
```python
    def reverseStr(self, s: str, k: int) -> str:
        s, leng = list(s), len(s)
        for i in range(0, leng, 2*k):
            l, r = i, min(i + k - 1, leng - 1)
            while l < r:
                s[l], s[r] = s[r], s[l]
                l, r = l+1, r-1
        return ''.join(s)
```


**III). Recursion**
| O(T): O(n) | O(S): O(n) | Rt: 28ms | 
```python
    def reverseStr(self, s: str, k: int) -> str:
        if len(s) <= 2 * k: return s[:k][::-1] + s[k:]
        return s[:k][::-1] + s[k:2*k] + self.reverseStr(s[2*k:], k)
```
Alternative: | Rt: 28ms |
```python
    def reverseStr(self, s: str, k: int) -> str:
        return s[:k][::-1] + s[k:2*k] + self.reverseStr(s[2*k:], k) if s else ''
```

