**Get it Done, Make it Better, Share the Best -- Talse**
**I). Compare with sorted**
| O(T): O(nlgn) | O(S): O(n) | Rt: 212ms | 
```python
    def findUnsortedSubarray(self, nums: List[int]) -> int:
        leng = len(nums)
        l, r, copy = 0, leng - 1, sorted(nums)
        while l < leng - 1 and nums[l] == copy[l]: l += 1
        while r >= l and nums[r] == copy[r]: r -= 1
        return r - l + 1
```
Alternative: pythonic batch style. | Rt: 216ms |
```python
    def findUnsortedSubarray(self, nums: List[int]) -> int:
        difind = [ind for ind, (i, j) in enumerate(zip(nums, sorted(nums))) if i != j]
        return difind[-1] - difind[0] + 1 if difind else 0
```
Triple: one loop both direction style. | Rt: 204ms |
```python
    def findUnsortedSubarray(self, nums: List[int]) -> int:
        snum, leng = sorted(nums), len(nums)
        l, r = 0, leng - 1
        while l < r:
            if snum[l] == nums[l]: l += 1
            elif snum[r] == nums[r]: r -= 1
            else: return r - l + 1
        return 0
```
Forth: one loop one direction style. | Rt: 220ms |
```python
    def findUnsortedSubarray(self, nums: List[int]) -> int:
        snum = sorted(nums)
        st = end = -1
        for i in range(len(nums)):
            if nums[i] != snum[i]:
                if st == -1: st = i
                end = i
        return 0 if end == st else end - st + 1
```
Referrence: https://leetcode.com/problems/shortest-unsorted-continuous-subarray/discuss/103070/Java-Solution-Sort./106342


**II). Find Unsorted Pairs**
| O(T): O(n * n) | O(S): O(1) | Rt: ms | TLE
```python
    def findUnsortedSubarray(self, nums: List[int]) -> int:
        st, end, leng = -1, -1, len(nums)
        for i in range(leng):
            for j in range(i + 1, leng):
                if nums[i] > nums[j]:
                    if st == -1: st = i
                    end = max(end, j)
        return 0 if end == -1 else end - st + 1
```


**III). Linear Time Solution**
| O(T): O(n) | O(S): O(1) | Rt: 272ms | 
```python
    def findUnsortedSubarray(self, nums: List[int]) -> int:
        minn, maxn, st, end, l = float('inf'), -float('inf'), -1, -2, len(nums)
        for i in range(l):
            minn = min(minn, nums[l-1-i])
            maxn = max(maxn, nums[i])
            if nums[i] < maxn: end = i
            if nums[l-1-i] > minn: st = l-1-i
        return end - st + 1
```
Referrence: https://leetcode.com/problems/shortest-unsorted-continuous-subarray/discuss/103057/Java-O(n)-Time-O(1)-Space
Comment: this solution is very hard to understand. Even you do understand, it it hard to come up with in an interview. This is a two pass solution composed in one loop. 
Alternative: better readability version. | Rt: 212ms |
```python
    def findUnsortedSubarray(self, nums: List[int]) -> int:
        r_bound, pre, l = -1, -float('inf'), len(nums)
        for i in range(l):
            #a disorded position found
            if nums[i] < pre: r_bound = i
            #this is the same as pre = max(pre, nums[i]), save time 
            else: pre = nums[i]
        #all items are in order
        if r_bound == -1: return 0
        
        l_bound, pre, = -1, nums[-1]
        for i in range(l-2, -1, -1):
            if nums[i] > pre: l_bound = i
            #this is the same as pre = min(pre, nums[i])
            else: pre = nums[i]
        return r_bound - l_bound + 1
```
Comment: two rounds. First round from left to right find the potential right bound. The right bound is the first occrring index who doesn't satisfy nums[i] > max(nums[:i]). Second round from right to left find the potential left bound (you have a right bound if and only if you have a left bound, it is impossible there is only one element that is not sorted.). The left bound is the first occuring index who doesn't satisfy nums[i] < min(nums[i+1 :]). Well, pretty understandable now, still hard to come up with it by yourself in a real on-site. 
Summary: the most valuable thing I learn from this solution is the fact: we decide the right bound by traverse from left to right and decide the left bound by traversing from right to left. Why we cannot find both left and right bounds in a left-to-right traverse? or why we cannot find the left bound by left-to-right traverse?  


