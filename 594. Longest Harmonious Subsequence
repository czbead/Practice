**Get it Done, Make it Better, Share the Best -- Talse**
**I). Dict**
| O(T): O(n) | O(S): O(n) | Rt: 320ms | 
```python
    def findLHS(self, nums: List[int]) -> int:
        rst, ct = 0, collections.Counter(nums)
        for i in ct:
            if ct[i+1]: rst = max(rst, ct[i] + ct[i+1])
        return rst
```
Alternative: rewrite with dict | Rt: 344ms |
```python
    def findLHS(self, nums: List[int]) -> int:
        dt = collections.defaultdict(int)
        for i in nums: dt[i] += 1
        return max([dt[k] + dt[k+1] for k in list(dt) if dt[k+1]] or [0])
```
Comment: 
```python 
return max([dt[k] + dt[k+1] for k in dt if dt[k+1]] or [0])
``` 
will lead to a "ditionary changed size during iteration" error. Could anybody explain why? 
using list(dt) force the program copy the keys as a list therefore can execute correctly. 

Summary: Well, I was gotten by this problem twice. Exactly speaking, the "subsequence" got me twice. The thing I learn from this problem is very simple: sequence has nothing to do with order. Once you get out of the left-to-right follow-order thinking circle, this can be quickly solved in a second. Second trick, don't ever go both directions (+1 and -1) which will complicate your thinking, always drive one-direction throughtout, because the other direction will be covered by another item's one-direction consideration.

Triple: set solution TLE.
```python
    def findLHS(self, nums: List[int]) -> int:
        s = set(nums)
        return max([nums.count(i) + nums.count(i+1) for i in s if i + 1 in s] or [0])
```

Others: sort-based solution - https://leetcode.com/problems/longest-harmonious-subsequence/discuss/103505/Simple-Java-Sort-Solution-(beat-97.9); https://leetcode.com/problems/longest-harmonious-subsequence/discuss/103497/Simple-Java-HashMap-Solution/106611; I don't recommend sort-based solution because you easily code out defactive code, annoying edge cases and boundary check. 
