**Get it Done, Make it Better, Share the Best -- Talse**
**I). Naive**
| O(T): O(n) | O(S): O(n) | Rt: 176ms | 
```python
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        i, most, bed = 1, 0, [0] + flowerbed + [0]
        while i < len(bed) - 1:
            if bed[i] == bed[i-1] == bed[i+1] == 0: i, most = i + 2, most + 1
            else: i += 1
        return most >= n
```
Alternative: slightly improved version. | Rt: 176ms |
```python
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        i, most, bed = 1, 0, [0] + flowerbed + [0]
        while i < len(bed) - 1:
            if bed[i] == bed[i-1] == bed[i+1] == 0: i, most = i + 2, most + 1
            elif bed[i] == 1: i += 2
            else: i += 1
        return most >= n
```
Alternative: modify the input. | Rt: 172ms |
```python
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        rst, f = 0, [0] + flowerbed + [0]
        for i in range(1, len(f) - 1):
            if f[i] == f[i-1] == f[i+1]: 
                f[i], rst = 1, rst + 1
        return rst >= n
```


**II). Count Continuous 0s**
| O(T): O(n) | O(S): O(n) | Rt: 172ms | 
```python
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
    	#the last 1 can help avoid last round counter check
        ct, rst, bed = 0, 0, [0] + flowerbed + [0, 1]
        for i in bed:
            if i == 0: ct += 1
            else: 
                if ct > 0: rst += (ct - 1) // 2
                ct = 0
        return rst >= n
```
Alternative: with modifying the input. | Rt: 172ms |
```python
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        ct, rst= 1, 0
        for i in flowerbed:
            if i == 0: ct += 1
            else: 
                if ct: rst += (ct - 1) // 2
                ct = 0
        if ct: rst += ct // 2
        return rst >= n
```
Comment: please do notice the special care for the initial and last counter (all add 1).


**III). Stringify**
| O(T): O(n) | O(S): O(n) | Rt: 336ms | 
```python
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        ct, s = 0, ''.join(['0'] + [str(i) for i in flowerbed] + ['0'])
        while '000' in s:
            ct += 1
            #replace first occurrence
            s = s.replace('000', '0', 1)
        return ct >= n
```

