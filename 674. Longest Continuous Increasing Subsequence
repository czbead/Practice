**Get it Done, Make it Better, Share the Best -- Talse**
**I). Count**
| O(T): O(n) | O(S): O(1) | Rt: 76ms | 
```python
    def findLengthOfLCIS(self, nums: List[int]) -> int:
        if not nums: return 0
        rst, ct = 0, 1
        for i in range(len(nums) - 1):
            if nums[i + 1] > nums[i]: ct += 1
            else: ct, rst = 1, max(rst, ct)
        return max(rst, ct)
```
Alternative; edge case free version with extra O(n) space. | Rt: 80ms |
```python
    def findLengthOfLCIS(self, nums: List[int]) -> int:
        nums = [-float('inf')] + nums + [-float('inf')]
        rst = ct = 0
        for i in range(len(nums) - 1):
            if nums[i + 1] > nums[i]: ct += 1
            else: ct, rst = 1, max(rst, ct)
        return rst
``` 


**II). DP**
| O(T): O(n) | O(S): O(n) | Rt: 72ms | 
```python
    def findLengthOfLCIS(self, nums: List[int]) -> int:
        mapp = [1] * len(nums)
        for i in range(len(nums) - 1):
            if nums[i + 1] > nums[i]: mapp[i + 1] += mapp[i]
        return max(mapp) if mapp else 0
```


