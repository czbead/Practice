**Get it Done, Make it Better, Share the Best -- Talse**
**I). Two Case check**
| O(T): O(n) | O(S): O(n) | Rt: 132ms | 
```python
    def validPalindrome(self, s: str) -> bool:
        def isPal(s):
            for i in range(len(s) // 2):
                if s[i] != s[-1 - i]: return False
            return True
 
        l = len(s)
        for i in range(l // 2):
            if s[i] != s[-1 - i]: 
                return isPal(s[i+1: l-i]) or isPal(s[i: -1 - i])
        return True
```
Attention: when you do slice over list, pay attention to [i: -i], -i could be -0 == 0 which is a hidden bug. 
Alternative: O(1) space version.  | Rt: 160ms |
```python
    def validPalindrome(self, s: str) -> bool:
        def isPal(s, l, r):
            while l < r:
                if s[l] != s[r]: return False
                l, r = l + 1, r - 1
            return True
 
        l = len(s)
        for i in range(l // 2):
            if s[i] != s[-1 - i]: 
                return isPal(s, i+1, l-1-i) or isPal(s, i, l-2-i)
        return True
```
Triple: concise and fast version. | Rt: 88ms |
```python
    def validPalindrome(self, s: str) -> bool:
        isPal = lambda s: s == s[::-1]
        l = len(s)
        for i in range(l // 2):
            if s[i] != s[-1 - i]: 
                return isPal(s[i+1: l-i]) or isPal(s[i: l-1-i])
        return True
```
