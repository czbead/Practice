**Get it Done, Make it Better, Share the Best -- Talse**
**I). Standard Binary Search**
| O(T): O(lgn) | O(S): O(1) | Rt: 252ms | 
```python
    def search(self, nums: List[int], target: int) -> int:
        l, r = 0, len(nums) - 1
        while l < r: 
            mid = l + (r - l) // 2
            if nums[mid] < target: l = mid + 1
            else: r = mid
        return l if nums[l] == target else -1
```


**II). All-Check Binary Search**
| O(T): O(lgn) | O(S): O(1) | Rt: 260ms | 
```python
    def search(self, nums: List[int], target: int) -> int:
        l, r = 0, len(nums) - 1
        while l <= r: 
            mid = l + (r - l) // 2
            if nums[mid] == target: return mid
            elif nums[mid] < target: l = mid + 1
            else: r = mid - 1
        return -1
```


**III). Standard Binary Search with Check**
| O(T): O(lgn) | O(S): O(1) | Rt: 260ms | 
```python
    def search(self, nums: List[int], target: int) -> int:
        l, r = 0, len(nums) - 1
        while l < r: 
            mid = l + (r - l) // 2
            if nums[mid] == target: return mid
            elif nums[mid] < target: l = mid + 1
            else: r = mid
        return l if nums[l] == target else -1
```


**IV). Lower Bound Binary Search**
| O(T): O(lgn) | O(S): O(1) | Rt: ms | 
```python
	def lower_bound_bs(nums, target):
	    l, r = 0, len(nums) - 1
	    while l <= r:
	        mid = l + (r - l) // 2
	        if nums[mid] < target: l = mid + 1
	        else: r = mid - 1
	    return l
```
Alternative: 
```python
	def bs_left(nums, target):
	    l, r = 0, len(nums) - 1
	    while l < r:
	        mid = l + (r - l) // 2
	        if nums[mid] < target: l = mid + 1
	        else: r = mid
	    return l
```


**V). Upper Bound Binary Search**
| O(T): O(lgn) | O(S): O(1) | Rt: ms | 
```python
	def upper_bound_bs(nums, target):
	    l, r = 0, len(nums) - 1
	    while l <= r:
	        mid = l + (r - l) // 2
	        if nums[mid] <= target: l = mid + 1
	        else: r = mid - 1
	    return l
```
Alternative: 
```python
	def bs_right(nums, target):
	    l, r = 0, len(nums) - 1
	    while l < r:
	        mid = l + (r - l) // 2
	        if nums[mid] <= target: l = mid + 1
	        else: r = mid
	    return l
```
