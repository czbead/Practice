**Get it Done, Make it Better, Share the Best -- Talse**
**I). All Bound Inside**
| O(T): O(n) | O(S): O(1) | Rt: 20ms | 
```python
    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:
        return (rec1[0] < rec2[2] and rec1[1] < rec2[3]) and (rec2[0] < rec1[2] and rec2[1] < rec1[3])
```
Comment: min(x) < max(x), min(y) < max(y), bidirection. Four boundaries all overlap. 
Alternative: for better readability.  | Rt: 20ms |
```python
    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:
        l1, b1, r1, t1 = rec1
        l2, b2, r2, t2 = rec2
        return l1 < r2 and l2 < r1 and b1 < t2 and b2 < t1
```


**II). Reverse Thinking: One Bound Go Beyond or Just Touch**
| O(T): O(n) | O(S): O(1) | Rt: 28ms | 
```python
    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:
        return not(rec1[0] >= rec2[2] or rec1[2] <= rec2[0] or rec1[1] >= rec2[3] or rec1[3] <= rec2[1])
```
Comment: min(x) >= max(x), max(x) <= min(x) and the same apply to y, any condition make it never overlap. 
Alternative: for better readability.  | Rt: 28ms |
```python
    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:
        l1, b1, r1, t1 = rec1
        l2, b2, r2, t2 = rec2
        return not(l1 >= r2 or l2 >= r1 or b1 >= t2 or b2 >= t1)
```


**III). Boundary Check**
| O(T): O(n) | O(S): O(1) | Rt: 24ms | 
```python
    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:
        lmax = max(rec1[0], rec2[0])
        rmin = min(rec1[2], rec2[2])
        tmin = min(rec1[3], rec2[3])
        bmax = max(rec1[1], rec2[1])
        return lmax < rmin and bmax < tmin
```
Comment: actually, the overlapped area = (rmin - lmax) * (tmin - bmax). I admit it is hard to imagine the graph in your mind, me too. 

Alternative: more readable version.  | Rt: 24ms |
```python
    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:
        l1, b1, r1, t1 = rec1
        l2, b2, r2, t2 = rec2
        width = min(r1, r2) - max(l1, l2)
        height = min(t1, t2) - max(b1, b2)
        return width > 0 and height > 0
```
Referrence: https://leetcode.com/problems/rectangle-overlap/discuss/132340/C++JavaPython-1-line-Solution-1D-to-2D/140104

