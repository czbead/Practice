**Get it Done, Make it Better, Share the Best -- Talse**
**I). Find a Summit**
| O(T): O(n) | O(S): O(1) | Rt: 88ms | 
```python
    def peakIndexInMountainArray(self, A: List[int]) -> int:
        return next(i for i in range(1, len(A) - 1) if (A[i] - A[i-1]) * (A[i] - A[i+1]) > 0)
```
Comment: just find a summit, not necessary the toppest one. If there is only one summit, it is peak. As the problem mentioned, there exists "**some**" summits. Read the problem really carefully will save you a lot of troubles. Also, there is no such "flat platform" in this context. 

Alternative:  | Rt: 76ms |
```python
    def peakIndexInMountainArray(self, A: List[int]) -> int:
        return A.index(max(A))
```
Comment: find the peak of all summit.


**II). Start Descend Point**
| O(T): O(n) | O(S): O(1) | Rt: 80ms | 
```python
    def peakIndexInMountainArray(self, A: List[int]) -> int:
        return next(i for i in range(len(A) - 1) if A[i+1] < A[i])
```
Comment: find a summit as well, not necessary the peak. 


**III). Binary Search**
| O(T): O() | O(S): O() | Rt: 80ms | 
```python
    def peakIndexInMountainArray(self, A: List[int]) -> int:
        l, r = 0, len(A) - 1
        while l < r: 
            mid = l + (r - l) // 2
            if A[mid] < A[mid + 1]: l = mid + 1
            else: r = mid
        return l
```
Comment: binary search solution always find the peak, toppest summit. 
Analysis: if the sequence is still rising, the peak must be on its right. Otherwise, the peak must be on its left if it already start descending. 
Alternative:  | Rt: 84ms |
```python
    def peakIndexInMountainArray(self, A: List[int]) -> int:
        l, r = 0, len(A) - 1
        while l <= r: 
            mid = l + (r - l) // 2
            if A[mid - 1] < A[mid] > A[mid + 1]: return mid
            elif A[mid] < A[mid + 1]: l = mid + 1
            else: r = mid - 1
```

Others: golden section search -- pretty similar to binary search. instead of cut at half, it cut the sequence into 3 pieces. A little difficult if you want to code it up. I give up after 1 hour try. 
https://medium.com/datadriveninvestor/golden-section-search-method-peak-index-in-a-mountain-array-leetcode-852-a00f53ed4076
https://leetcode.com/problems/peak-index-in-a-mountain-array/discuss/139848/C%2B%2BJavaPython-Better-than-Binary-Search


