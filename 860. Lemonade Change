**Get it Done, Make it Better, Share the Best -- Talse**
**I). Naive**
| O(T): O(n) | O(S): O(1) | Rt: 144ms | 
```python
    def lemonadeChange(self, bills: List[int]) -> bool:
        fiv = ten = 0
        for i in bills:
            if i == 5: fiv += 1
            elif i == 10: 
                if not fiv: return False
                fiv, ten = fiv - 1, ten + 1
            else: 
                if ten and fiv: fiv, ten = fiv - 1, ten - 1
                elif fiv > 2: fiv -= 3
                else: return False
        return True
```
Comment: spend ten as much as you can, 2 fiv can make a ten while a ten cannot make two fivs. Well, getthing 20 is a tragidy, you will never spend it.


**II). Assume Never Run Out of Fiv**
| O(T): O(n) | O(S): O(1) | Rt: 144ms | 
```python
    def lemonadeChange(self, bills: List[int]) -> bool:
        fiv = ten = 0
        for i in bills:
            if i == 5: fiv += 1
            elif i == 10: fiv, ten = fiv - 1, ten + 1
            elif ten: fiv, ten = fiv - 1, ten - 1
            else: fiv -= 3
            if fiv < 0: return False
        return True
```
Referrence: https://leetcode.com/problems/lemonade-change/discuss/143719/C%2B%2BJavaPython-Straight-Forward
Comment: clever exception-like solution. 


