**Get it Done, Make it Better, Share the Best -- Talse**
**I). Play the Game**
| O(T): O(n) | O(S): O(n) | Rt: 388ms | 
```python
    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:
        dt = {0: (0, 1), 1: (1, 0), 2: (0, -1), 3: (-1, 0)}
        obst = {tuple(lst) for lst in obstacles}
        rst, dire, pos = 0, 0, (0, 0)
        for i in commands:
            if i == -2: dire = (dire - 1) % 4
            elif i == -1: dire = (dire + 1) % 4
            else: 
                a, b = dt[dire]
                while i:
                    x, y = pos[0] + a, pos[1] + b
                    if (x, y) not in obst: pos, rst = (x, y), max(rst, x*x + y*y)
                    i -= 1
        return rst
```
Comment: list object is unhashable, therefore I convert list of lists to list of tuples. Only update the distance when you take a new step. Retrieve the dire dictionary once before a long move. 
Alternative: slightly refined.  | Rt: 376ms |
```python
    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:
        dt, obst = [(0, 1), (1, 0), (0, -1), (-1, 0)], {tuple(lst) for lst in obstacles}
        rst, dire, x, y = 0, 0, 0, 0
        for i in commands:
            if i == -2: dire = (dire - 1) % 4
            elif i == -1: dire = (dire + 1) % 4
            else: 
                a, b = dt[dire]
                while i:
                    _x, _y = x + a, y + b
                    if (_x, _y) not in obst: x, y, rst = _x, _y, max(rst, _x*_x + _y*_y)
                    i -= 1
        return rst
```
Referrence: idea from https://leetcode.com/problems/walking-robot-simulation/discuss/152364/Python-short-and-straightforward-solution-w-explanation-and-statement-is-wrong-in-the-question-!!!


**II). Manipulate Direction**
| O(T): O() | O(S): O() | Rt: 384ms | 
```python
    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:
        obst = {tuple(lst) for lst in obstacles}
        rst, dire, x, y, dx, dy = 0, 0, 0, 0, 0, 1
        for i in commands:
            if i == -2: dx, dy = -dy, dx
            elif i == -1: dx, dy = dy, -dx
            else: 
                while i:
                    _x, _y = x + dx, y + dy
                    if (_x, _y) not in obst: x, y, rst = _x, _y, max(rst, _x*_x + _y*_y)
                    i -= 1
        return rst
```
Referrence: https://leetcode.com/problems/walking-robot-simulation/discuss/152364/Python-short-and-straightforward-solution-w-explanation-and-statement-is-wrong-in-the-question-!!!/158210

Comment: really learn the art of manipulate directions. 

