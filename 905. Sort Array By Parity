**Get it Done, Make it Better, Share the Best -- Talse**
**I). Two Pointer One Pass**
| O(T): O(n) | O(S): O(1) | Rt: 80ms | 
```python
    def sortArrayByParity(self, A: List[int]) -> List[int]:
        l, r = 0, len(A)-1
        while l < r:
            if A[l] % 2 == 0: l += 1
            elif A[r] % 2: r -= 1
            else: A[l], A[r], l, r = A[r], A[l], l+1, r-1
        return A
```


**II). Collect Odd and Even**
| O(T): O(n) | O(S): O(n) | Rt: 76ms | 
```python
    def sortArrayByParity(self, A: List[int]) -> List[int]:
        return [i for i in A if i % 2 == 0] + [i for i in A if i % 2]
```


**III). Deque**
| O(T): O(n) | O(S): O(n) | Rt: 80ms | 
```python
    def sortArrayByParity(self, A: List[int]) -> List[int]:
        rst = collections.deque([])
        for i in A:
            if i % 2: rst.append(i)
            else: rst.appendleft(i)
        return rst
```
Alternative: &1 trick.  | Rt: 76ms |
```python
    def sortArrayByParity(self, A: List[int]) -> List[int]:
        rst = collections.deque([])
        for i in A:
            if i & 1: rst.append(i)
            else: rst.appendleft(i)
        return rst
```
Comment: using &1 help detect odd, this is a trick worth mastering. 

