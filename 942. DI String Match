**Get it Done, Make it Better, Share the Best -- Talse**
**I). Brute Force -- Safest Decision**
| O(T): O(n) | O(S): O(1) | Rt: 68ms | 
```python
    def diStringMatch(self, S: str) -> List[int]:
        l, r, rst = 0, len(S), []
        if S[0] == 'I': rst.append(l); l += 1
        else: rst.append(r); r -= 1
            
        for i in range(len(S) - 1):
            if S[i] == 'I':
                if S[i+1] == S[i]: rst.append(l); l += 1
                else: rst.append(r); r -= 1
            else:
                if S[i+1] == S[i]: rst.append(r); r -= 1
                else: rst.append(l); l += 1
        rst.append(l)
        return rst
```
Comment: two level check for each digit, kind of greedy. For each decision, leave the greatest available room (safest) for the next coming "trend"


**II). Lazy Decision**
| O(T): O(n) | O(S): O(1) | Rt: 64ms | 
```python
    def diStringMatch(self, S: str) -> List[int]:
        l, r, rst = 0, len(S), []
        for i in S:
            if i == 'I': rst.append(l); l += 1
            else: rst.append(r); r -= 1
        rst.append(l)
        return rst
```
Comment: greedy like solution, one level check. For each decision, do the minimum move
Others: this is a similar two pointer solution, however significantly unreadable from my perspective: https://leetcode.com/problems/di-string-match/discuss/194904/C%2B%2BJavaPython-Straight-Forward



**III). Deque**
| O(T): O(n) | O(S): O(n) | Rt: 72ms | 
```python
    def diStringMatch(self, S: str) -> List[int]:
        rst, nums = [], collections.deque(range(len(S) + 1))
        print(nums)
        for i in S:
            if i == 'I': rst.append(nums.popleft())
            else: rst.append(nums.pop())
        rst.append(nums.pop())  #don't miss this, there is only one left
        return rst
```
Referrence: https://leetcode.com/problems/di-string-match/discuss/227472/Python-3-beats-94-using-deque

