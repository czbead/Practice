**Get it Done, Make it Better, Share the Best -- Talse**
**I). Recursive**
| O(T): O() | O(S): O(1) | Rt: 1116ms | 
```python
    def isMatch(self, s: str, p: str) -> bool:
        if not p: return not s
        if len(p) > 1 and p[1] == '*': 
            #'*' repeat 0 time or repeat several times
            return self.isMatch(s, p[2:]) or s and ((p[0] == '.' or p[0] == s[0]) and self.isMatch(s[1:], p))
        return s and (p[0] == '.' or p[0] == s[0]) and self.isMatch(s[1:], p[1:])
```
Referrence: https://leetcode.com/problems/regular-expression-matching/discuss/5665/My-concise-recursive-and-DP-solutions-with-full-explanation-in-C%2B%2B


**II). DP**
| O(T): O(mn) | O(S): O(mn) | Rt: 80ms | 
```python
    def isMatch(self, s: str, p: str) -> bool:
        ls, lp = len(s), len(p)
        dp = [[False] * (lp+1) for _ in range(ls+1)]
        #initialize base dp state
        dp[0][0] = True    #s == p == ''
        for j in range(2, lp+1):
            # s == '' while p = '??** ... ?*'
            dp[0][j] = p[j-1] == '*' and dp[0][j-2]
        
        for i in range(1, ls+1):
            for j in range(1, lp+1):
                #if match cur single char, both s and p forward 1 step
                if p[j-1] == '.' or p[j-1] == s[i-1]: dp[i][j] = dp[i-1][j-1]
                elif p[j-1] == '*':
                    #* can only repeat 0 time; pattern forward 2 step
                    if p[j-2] != '.' and p[j-2] != s[i-1]: dp[i][j] = dp[i][j-2]
                    #three cases: a). * repeat 0 time, s don't forward, p forward 2 step; 
                    #b). * repeat 1 time; s forward 1 step, p forward 2 step; 
                    #c). * repeat multiple times; s forward 1 step, p don't forward;
                    else: dp[i][j] = dp[i][j-2] or dp[i-1][j-2] or dp[i-1][j]
        return dp[-1][-1]
```
Referrence: https://leetcode.com/problems/regular-expression-matching/discuss/5651/Easy-DP-Java-Solution-with-detailed-Explanation

