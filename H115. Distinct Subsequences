**Get it Done, Make it Better, Share the Best -- Talse**
**I). Recursive**
| O(T): O() | O(S): O() | Rt: ms | TLE
```python
    def numDistinct(self, s: str, t: str) -> int:
        if not t: return 1
        if not s: return 0
        if s[0] != t[0]: return self.numDistinct(s[1:], t)
        return self.numDistinct(s[1:], t[1:]) + self.numDistinct(s[1:], t)
```

Alternative: | Rt: 304ms |
```python
    def numDistinct(self, s: str, t: str) -> int:
        def numDis(s, t, i, j, m):
            if j == len(t): return 1
            if i == len(s): return 0
            if m[i][j] is None: 
                if s[i] != t[j]: m[i][j] = numDis(s, t, i+1, j, m)
                else: m[i][j] = numDis(s, t, i+1, j+1, m) + numDis(s, t, i+1, j, m)
            return m[i][j]
        
        ls, lt = len(s), len(t)
        m = [[None] * lt for _ in range(ls)]
        return numDis(s, t, 0, 0, m)
```


**II). DP**
| O(T): O(mn) | O(S): O() | Rt: 232ms | 
```python
    def numDistinct(self, s: str, t: str) -> int:
        ls, lt = len(s), len(t)
        dp = [[0] * (lt+1) for _ in range(ls+1)]
        dp[0][0] = 1
        for i in range(1, ls+1): dp[i][0] = 1
        # for j in range(1, lt+1): dp[0][j] = 0
        for i in range(1, ls+1):
            for j in range(1, lt+1):
                dp[i][j] = dp[i-1][j]
                if s[i-1] == t[j-1]: dp[i][j] += dp[i-1][j-1]
        return dp[-1][-1]
```

