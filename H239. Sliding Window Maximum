**Get it Done, Make it Better, Share the Best -- Talse**
**I). Heap**
| O(T): O(nlgn) | O(S): O(n) | Rt: ms | TLE
```python
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        l = len(nums)
        n = l-k+1
        rst = [None] * n
        arr = [(-nums[i], i) for i in range(l)]
        heapq.heapify(arr)
        while arr:
            negval, i = heapq.heappop(arr)
            for j in range(max(0, i-k+1), min(n, i+1)):
                if rst[j] is None: rst[j] = -negval
        return rst
```


**II). Deque**
| O(T): O(n) | O(S): O(n) | Rt: 344ms | 
```python
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        l, q = len(nums), collections.deque()
        rst, j = [0] * (l-k+1), 0
        for i in range(l):
            while q and q[0] < i-k+1: q.popleft()
            while q and nums[q[-1]] < nums[i]: q.pop()
            q.append(i)
            if i-k+1 >= 0: rst[j], j = nums[q[0]], j+1
        return rst
```
Reference: https://leetcode.com/problems/sliding-window-maximum/discuss/65884/Java-O(n)-solution-using-deque-with-explanation

Alternative: | Rt: 348ms |
```python
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        l, q = len(nums), collections.deque()
        rst = []
        for i in range(l):
            if q and q[0] < i-k+1: q.popleft()
            while q and nums[q[-1]] < nums[i]: q.pop()
            q.append(i)
            if i-k+1 >= 0: rst.append(nums[q[0]])
        return rst
```
