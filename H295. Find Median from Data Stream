**Get it Done, Make it Better, Share the Best -- Talse**
**I). Two Heap**
| O(T): O() | O(S): O() | Rt: 200ms | 
```python
class MedianFinder:

    def __init__(self):
        self.small, self.large = [], []

    def addNum(self, num: int) -> None:
        if len(self.small) == len(self.large):
            heapq.heappush(self.large, -heapq.heappushpop(self.small, -num))
        else:
            heapq.heappush(self.small, -heapq.heappushpop(self.large, num))

    def findMedian(self) -> float:
        if len(self.large) == len(self.small): return (self.large[0] - self.small[0]) / 2
        else: return self.large[0]
```
Reference: https://leetcode.com/problems/find-median-from-data-stream/discuss/74047/JavaPython-two-heap-solution-O(log-n)-add-O(1)-find