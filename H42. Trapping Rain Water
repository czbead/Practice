**Get it Done, Make it Better, Share the Best -- Talse**
**I). Two Pointer**
| O(T): O(n) | O(S): O(1) | Rt: 48ms | 
```python
    def trap(self, height: List[int]) -> int:
        le = len(height)
        rst, l, r, mxl, mxr = 0, 0, le-1, 0, 0
        while l <= r:
            if height[l] <= height[r]:
                mxl = max(mxl, height[l])
                rst += mxl - height[l]
                l += 1
            else:
                mxr = max(mxr, height[r])
                rst += mxr - height[r]
                r -= 1
        return rst
```
Referrence: https://leetcode.com/problems/trapping-rain-water/discuss/17357/Sharing-my-simple-c%2B%2B-code%3A-O(n)-time-O(1)-space
Comment: very similar to the solution of Container With Most Water; not very easy to understand.


**II). Stack**
| O(T): O(n) | O(S): O(n) | Rt: 56ms | 
```python
    def trap(self, height: List[int]) -> int:
        l = len(height)
        rst, stack = 0, [0]
        for i in range(1, l):
            while stack and height[i] > height[stack[-1]]:
                pre = stack.pop()
                if stack: 
                    bound = min(height[(stack[-1])], height[i])
                    rst += (bound - height[pre]) * (i-stack[-1]-1)
            stack.append(i)
        return rst
```
Referrence: https://leetcode.com/problems/trapping-rain-water/discuss/17414/A-stack-based-solution-for-reference-inspired-by-Histogram