**Get it Done, Make it Better, Share the Best -- Talse**
**I). Recursive**
| O(T): O() | O(S): O() | Rt: ms | TLE
```python
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        if not s3: return not s1 and not s2
        return s1 and s1[0] == s3[0] and self.isInterleave(s1[1:], s2, s3[1:]) or s2 and s2[0] == s3[0] and self.isInterleave(s1, s2[1:], s3[1:])
```

Alternative: | Rt: 28ms |
```python
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        def isValid(s1, s2, s3, i1, i2, i3, m):
            if i3 == len(s3): return i1 == len(s1) and i2 == len(s2)
            if (i1, i2, i3) not in m:
                m[(i1, i2, i3)] = i1<len(s1) and s1[i1]==s3[i3] and isValid(s1, s2, s3, i1+1, i2, i3+1, m) or i2<len(s2) and s2[i2]==s3[i3] and isValid(s1, s2, s3, i1, i2+1, i3+1, m)
            return m[(i1, i2, i3)]
        
        return isValid(s1, s2, s3, 0, 0, 0, {})
```

Triple: | Rt: 28ms |
```python
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        def isValid(s1, s2, s3, i1, i2, m):
            if i1 + i2 == len(s3): return i1 == len(s1) and i2 == len(s2)
            if m[i1][i2] is None:
                m[i1][i2] = i1<len(s1) and s1[i1]==s3[i1+i2] and isValid(s1, s2, s3, i1+1, i2, m) or i2<len(s2) and s2[i2]==s3[i1+i2] and isValid(s1, s2, s3, i1, i2+1, m)
            return m[i1][i2]
        
        l1, l2 = len(s1), len(s2)
        if len(s3) != l1 + l2: return False
        m = [[None] * (l2+1) for _ in range(l1+1)]
        return isValid(s1, s2, s3, 0, 0, m)
```


**II). DP**
| O(T): O(mn) | O(S): O(mn) | Rt: 36ms | 
```python
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        l1, l2 = len(s1), len(s2)
        if len(s3) != l1 + l2: return False
        dp = [[False] * (l2+1) for _ in range(l1+1)]
        dp[0][0] = True
        for i in range(1, l1+1): dp[i][0] = dp[i-1][0] and s1[i-1] == s3[i-1]
        for j in range(1, l2+1): dp[0][j] = dp[0][j-1] and s2[j-1] == s3[j-1]
        
        for i in range(1, l1+1):
            for j in range(1, l2+1):
                dp[i][j] = dp[i-1][j] and s1[i-1] == s3[i+j-1] or dp[i][j-1] and s2[j-1] == s3[i+j-1]
        return dp[-1][-1]
```
Referrence: https://leetcode.com/problems/interleaving-string/discuss/31879/My-DP-solution-in-C%2B%2B

Others: BFS and DFS - https://leetcode.com/problems/interleaving-string/discuss/31885/Python-DP-solutions-(O(m*n)-O(n)-space)-BFS-DFS.

