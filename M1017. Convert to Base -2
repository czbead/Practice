**Get it Done, Make it Better, Share the Best -- Talse**
**I). **
| O(T): O(lgn) | O(S): O(1) | Rt: 32ms | 
```python
    def baseNeg2(self, N: int) -> str:
        if N == 0: return '0'
        rst = []
        while N:
            rst.append(N % 2)
            N = -(N // 2)
        rst.reverse()
        return ''.join(map(str, rst))
```

Alternative: I know you find this solution very hard to understand. Here is the rescue. | Rt: 32ms |
```python
    def baseNeg2(self, N: int) -> str:
        if N == 0: return '0'
        rst = []
        while N:
            rst.append(N % 2)
            # math.ceil(a/b) = -(-a // b) => math.ceil(N / (-2))
            #the only difference between -2 and 2 is: when divider is negative, it round toward the lower bound which is negative. However, we need the result round toward 0;
            N = -(-N // (-2))
        rst.reverse()
        return ''.join(map(str, rst))
```
Referrence: https://leetcode.com/problems/convert-to-base-2/discuss/265507/JavaC%2B%2BPython-2-lines-Exactly-Same-as-Base-2


**II). Masking**
| O(T): O(1) | O(S): O(1) | Rt: 32ms | 
```python
    def baseNeg2(self, N: int) -> str:
        masks = [1 << i for i in range(1, 33, 2)]
        for m in masks:
            if N & m: N += 2 * m
        return bin(N)[2:]
```
Referrence: https://leetcode.com/problems/convert-to-base-2/discuss/265688/4-line-python-clear-solution-with-explanation


**III). General Negative Base Coversion**
| O(T): O(lgn) | O(S): O(1) | Rt: 32ms | 
```python
    def baseNeg2(self, N: int) -> str:
        if not N: return '0'
        rst, base = [], -2
        while N:
            N, mod = divmod(N, base)
            #round toward 0 instead of the default "round toward lower bound"
            if mod < 0: mod, N = mod + -base, N+1
            rst.append(mod)
        rst.reverse()
        return ''.join(map(str, rst))
```
Referrence: https://leetcode.com/problems/convert-to-base-2/discuss/265544/C%2B%2B-Geeks4Geeks; https://www.geeksforgeeks.org/convert-number-negative-base-representation/;
