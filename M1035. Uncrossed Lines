**Get it Done, Make it Better, Share the Best -- Talse**
**I). Naive Recursive**
| O(T): O() | O(S): O() | Rt: ms | TLE
```python
    def maxUncrossedLines(self, A: List[int], B: List[int]) -> int:
        if not A or not B: return 0
        if A[0] == B[0]: return 1 + self.maxUncrossedLines(A[1:], B[1:])
        return max(self.maxUncrossedLines(A, B[1:]), self.maxUncrossedLines(A[1:], B))
```


**II). DP Longest Common Subsequence**
| O(T): O(mn) | O(S): O(mn) | Rt: 388ms | 
```python
    def maxUncrossedLines(self, A: List[int], B: List[int]) -> int:
        la, lb = len(A), len(B)
        dp = [[0] * (lb+1) for _ in range(la+1)]
        for i in range(la-1, -1, -1):
            for j in range(lb-1, -1, -1):
                if A[i] == B[j]: dp[i][j] = dp[i+1][j+1] + 1
                else: dp[i][j] = max(dp[i][j+1], dp[i+1][j])
        return dp[0][0]
```

Alternative: |Rt: 388ms |
```python
    def maxUncrossedLines(self, A: List[int], B: List[int]) -> int:
        la, lb = len(A), len(B)
        dp = [[0] * (lb+1) for _ in range(la+1)]
        for i in range(1, la+1):
            for j in range(1, lb+1):
                if A[i-1] == B[j-1]: dp[i][j] = dp[i-1][j-1] + 1
                else: dp[i][j] = max(dp[i][j-1], dp[i-1][j])
        return dp[-1][-1]
```
Referrence: https://leetcode.com/problems/uncrossed-lines/discuss/282842/JavaC%2B%2BPython-DP-The-Longest-Common-Subsequence
