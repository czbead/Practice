**Get it Done, Make it Better, Share the Best -- Talse**
**I). DP with DFS: Spilt by Mid Point K**
| O(T): O(n^3) | O(S): O(n^2) | Rt: 212ms | 
```python
    def minScoreTriangulation(self, A: List[int]) -> int:
        def dfs(A, i, j, dp):
            if j-i+1 < 3: return 0
            if dp[i][j]: return dp[i][j]
            dp[i][j] = min(dfs(A, i, k, dp) + A[i]*A[k]*A[j] + dfs(A, k, j, dp) for k in range(i+1, j))
            return dp[i][j]
            
        dp = [[0] * 50 for _ in range(50)] 
        return dfs(A, 0, len(A)-1, dp)
```
Referrence: https://leetcode.com/problems/minimum-score-triangulation-of-polygon/discuss/286753/C%2B%2B-with-picture


**II). Bottom-up DP Distance**
| O(T): O(n^3) | O(S): O(n^2) | Rt: 92ms | 
```python
    def minScoreTriangulation(self, A: List[int]) -> int:   
        l = len(A)
        dp = [[0] * l for _ in range(l)] 
        for d in range(2, l):
            for i in range(l-d):
                j = i+d
                dp[i][j] = min(dp[i][k] + A[i]*A[k]*A[j] + dp[k][j] for k in range(i+1, j))
        return dp[0][-1]
``
Referrence: https://leetcode.com/problems/minimum-score-triangulation-of-polygon/discuss/286705/JavaC%2B%2BPython-DP
