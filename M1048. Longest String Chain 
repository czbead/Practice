**Get it Done, Make it Better, Share the Best -- Talse**
**I). Delete One at Once**
| O(T): O(mnlgn) | O(S): O(n) | Rt: 300ms | 
```python
    def longestStrChain(self, words: List[str]) -> int:
        words.sort(key=len)
        dt = {}
        for word in words:
            cur = 1
            for i in range(len(word)):
                cur = max(cur, dt.get(word[:i] + word[i+1:], 0) + 1)
            dt[word] = cur
        return max(dt.values())
```

Alternative: | Rt: 296ms |
```python
    def longestStrChain(self, words: List[str]) -> int:
        words.sort(key=len)
        dt, rst = {}, 0
        for word in words:
            dt[word] = max(dt.get(word[:i] + word[i+1:], 0) + 1  for i in range(len(word)))
            rst = max(rst, dt[word])
        return rst
```


**II). DP**
| O(T): O(nlgn) | O(S): O(n) | Rt: 2680ms | 
```python
    def longestStrChain(self, words: List[str]) -> int:
        def ispre(s1, s2):
            l1, l2 = len(s1), len(s2)
            if l2 != l1+1: return False
            i = j = 0
            while i < l1 and j < l2:
                if s1[i] == s2[j]: i, j = i+1, j+1
                else: j += 1
                if j > i+1: return False
            return True
        
        words.sort(key=len)
        l = len(words)
        #longest chain ends with i-th word
        dp, rst = [1] * l, 1
        for i in range(1, l):
            for j in range(i):
                if ispre(words[j], words[i]):
                    dp[i] = max(dp[i], dp[j]+1)
                    rst = max(rst, dp[i])
        return rst
```
Referrence: https://leetcode.com/problems/longest-string-chain/discuss/294890/C%2B%2BJavaPython-DP-Solution


**III). DFS**
| O(T): O(n) | O(S): O(n) | Rt: 332ms | 
```python
    def longestStrChain(self, words: List[str]) -> int:
        def dfs(word, allstr, history):
            if word in history: return history[word]
            count = 0
            for i in range(len(word)):
                cur = word[:i] + word[i+1:]
                if cur in allstr: 
                    count = max(count, dfs(cur, allstr, history))
            history[word] = count + 1
            return count + 1
        
        rst, s, history = 1, set(words), {}
        for word in words:
            rst = max(rst, dfs(word, s, history))
        return rst
```
Referrence: https://leetcode.com/problems/longest-string-chain/discuss/294890/C%2B%2BJavaPython-DP-Solution

