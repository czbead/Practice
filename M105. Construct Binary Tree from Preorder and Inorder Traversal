**Get it Done, Make it Better, Share the Best -- Talse**
**I). Recursion**
| O(T): O(n) | O(S): O(n) | Rt: 52ms | 
```python
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        def buildTree(preSt, preEnd, inSt, inEnd, indt, preorder):
            if preSt > preEnd or inSt > inEnd: return 
            root = TreeNode(preorder[preSt])
            index = indt[root.val]
            offset = index - inSt   #the amount of node in current left subtree.
            root.left = buildTree(preSt+1, preSt+offset, inSt, index-1, indt, preorder)
            root.right = buildTree(preSt+offset+1, preEnd, index+1, inEnd, indt, preorder)
            return root
        
        indt = {v: i for i, v in enumerate(inorder)}
        return buildTree(0, len(preorder)-1, 0, len(inorder)-1, indt, preorder)
```
Referrence: https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/34538/My-Accepted-Java-Solution; https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/34538/My-Accepted-Java-Solution/32854; 


**II). Pop Preorder as Root**
| O(T): O(n*n) | O(S): O(1) | Rt: 136ms | 
```python
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        if not inorder: return 
        rootval = preorder.pop(0)
        rootind = inorder.index(rootval)
        root = TreeNode(rootval)
        root.left = self.buildTree(preorder, inorder[:rootind])
        root.right = self.buildTree(preorder, inorder[rootind+1:])
        return root
```
Referrence: https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/34579/Python-short-recursive-solution.
Alternative: Linear time and constant space version. | Rt: 48ms |
```python
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        def build(preiter, dt, st, end):
            if st > end: return
            rootval = next(preiter)
            rootind = dt[rootval]
            root = TreeNode(rootval)
            root.left = build(preiter, dt, st, rootind-1)
            root.right = build(preiter, dt, rootind+1, end)
            return root
        
        dt = {v: i for i, v in enumerate(inorder)}
        iterpre = iter(preorder)
        return build(iterpre, dt, 0, len(inorder)-1)
```


**III). Iteration**
| O(T): O(1) | O(S): O(n) | Rt: 40ms | 
```python
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        if not preorder: return 
        root = TreeNode(preorder[0])
        stack, j = [root], 0  #j is the index of inorder
        for i in range(1, len(preorder)):  
            if stack[-1].val != inorder[j]:  #the coming node is left subtree (child)
                node = TreeNode(preorder[i])
                stack[-1].left = node
                stack.append(node)
            else:  
            	#left sub tree established, pop out all of them except the last root node
                while stack and stack[-1].val == inorder[j]: 
                    par = stack.pop(); j += 1
                #the last node as the parent of coming right child.
                node = TreeNode(preorder[i])
                par.right = node
                stack.append(node)
        return root
```
Referrence: https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/34555/The-iterative-solution-is-easier-than-you-think!;
I think this great post shares the same idea: https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/34543/Simple-O(n)-without-map;
Comment: I dont' quite understand this solution as well, especially for the right child operation. 

