**Get it Done, Make it Better, Share the Best -- Talse**
**I). Two Pointer with Slide Window**
| O(T): O(n) | O(S): O(1) | Rt: 300ms | 
```python
    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:
        l = len(customers)
        base = sum(customers[i] for i in range(l) if not grumpy[i])
        extra = cur = st = 0
        for i in range(l):
            if not grumpy[i]: continue
            if not grumpy[st]: st = i
            cur += customers[i]
            while i - st + 1 > X: 
                cur -= customers[st]
                st += 1
                while grumpy[st] != 1: st += 1
            extra = max(extra, cur)
        return extra + base
```

Alternative: | Rt: 292ms |
```python
    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:
        l, base, index = len(customers), 0, []
        for i in range(l):
            if not grumpy[i]: base += customers[i]
            else: index.append(i)
        extra = cur = st = 0
        for i in range(len(index)):
            cur += customers[index[i]]
            while index[i] - index[st] + 1 > X: 
                cur -= customers[index[st]]
                st += 1 
            extra = max(extra, cur)
        return extra + base
```

Triple: | Rt: 292ms |
```python
    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:
        if sum(grumpy) <= 1: return sum(customers)
        l = len(customers)
        base = sum(customers[i] for i in range(l) if not grumpy[i])
        extra = cur = 0
        it = iter(i for i in range(l) if grumpy[i])
        st = next(it)
        for i in range(l):
            if not grumpy[i]: continue
            cur += customers[i]
            while i - st + 1 > X: 
                cur -= customers[st]
                st = next(it)
            extra = max(extra, cur)
        return extra + base
```
