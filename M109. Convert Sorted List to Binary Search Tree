**Get it Done, Make it Better, Share the Best -- Talse**
**I). Recursion -- Cut in the Middle**
| O(T): O(nlgn) | O(S): O(h) | Rt: 128ms | 
```python
    def sortedListToBST(self, head: ListNode) -> TreeNode:
        if not head: return 
        if not head.next: return TreeNode(head.val)
        pre = slow = fast = head
        #find the middle node
        while fast and fast.next:
            pre = slow
            slow = slow.next
            fast = fast.next.next
        #head (start) -> ... -> pre | -> slow (middle) | -> ... -> fast (end)
        pre.next = None  
        root = TreeNode(slow.val)
        root.left = self.sortedListToBST(head)
        root.right = self.sortedListToBST(slow.next)
        return root
```

Others: there are other solutions computing the size as well. 

