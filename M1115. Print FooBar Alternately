**Get it Done, Make it Better, Share the Best -- Talse**
**I). Semaphore**
| O(T): O() | O(S): O() | Rt: 52ms | 
```python
from threading import Semaphore
class FooBar:
    def __init__(self, n):
        self.n = n
        self.foo_gate = Semaphore(1)
        self.bar_gate = Semaphore(0)

    def foo(self, printFoo: 'Callable[[], None]') -> None:
        for i in range(self.n):
            self.foo_gate.acquire()
            printFoo()
            self.bar_gate.release()

    def bar(self, printBar: 'Callable[[], None]') -> None:
        for i in range(self.n):
            self.bar_gate.acquire()
            printBar()
            self.foo_gate.release()
```
Referrence: this post covers all python threading methods - https://leetcode.com/problems/print-foobar-alternately/discuss/336629/5-Python-threading-solutions-(Barrier-Event-Condition-Lock-Semaphore)-with-explanation;

