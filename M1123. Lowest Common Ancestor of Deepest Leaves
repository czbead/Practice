**Get it Done, Make it Better, Share the Best -- Talse**
**I). DFS Depth and Node**
| O(T): O(n) | O(S): O(h) | Rt: 48ms | 
```python
    def lcaDeepestLeaves(self, root: TreeNode) -> TreeNode:
        def dfs(node):
            if not node: return 0, None
            ldep, lrst = dfs(node.left)
            rdep, rrst = dfs(node.right)
            if ldep == rdep: return ldep+1, node
            if ldep > rdep: return ldep+1, lrst
            return rdep+1, rrst
        
        return dfs(root)[1]
```
Others: this is a bottom-up solution, you can find a top-down manner solution here - https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/discuss/334577/JavaC%2B%2BPython-Two-Recursive-Solution
