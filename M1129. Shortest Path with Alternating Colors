**Get it Done, Make it Better, Share the Best -- Talse**
**I). BFS**
| O(T): O(n) | O(S): O(n) | Rt: 88ms | 
```python
    def shortestAlternatingPaths(self, n: int, red_edges: List[List[int]], blue_edges: List[List[int]]) -> List[int]:
        graph = collections.defaultdict(list)
        #0 -> red edge; 1 -> blue edge
        for i, j in red_edges: graph[i].append((j, 0))
        for i, j in blue_edges: graph[i].append((j, 1))
        rst = [-1] * n; rst[0] = 0
        q, step = collections.deque([(0, 0), (0, 1)]), 0
        usednode, usededge = set([0]), set([(0, 0), (0, 1)])
        while q:
            size, step = len(q), step+1
            for _ in range(size):
                node, col = q.popleft()
                for i, j in graph[node]:
                    if j ^ col:
                        if i not in usednode:
                            rst[i] = step
                            usednode.add(i)
                        if (i, j) not in usededge:
                            q.append((i, j))
                            usededge.add((i, j))
        return rst
```
Comment: be very careful for the dead loop, we utilized two set in the solution. 
