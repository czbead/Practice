**Get it Done, Make it Better, Share the Best -- Talse**
**I). Recursion -- Top Down**
| O(T): O(n) | O(S): O(h) | Rt: 40ms | 
```python
    def pathSum(self, root: TreeNode, sum: int, pre = []) -> List[List[int]]:
        if not root: return []
        if not root.left and not root.right:
            if root.val == sum: return [pre+[root.val]]
            return []
        sum, pre = sum-root.val, pre+[root.val]
        return self.pathSum(root.left, sum, pre) + self.pathSum(root.right, sum, pre)
```
Alternative: | Rt: 44ms |
```python
    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:
        def topdown(node, summ, pre, rst):
            if not node.left and not node.right:
                if node.val == summ: rst.append(pre + [summ])
                return;
            summ, pre = summ-node.val, pre+[node.val]
            if node.left: topdown(node.left, summ, pre, rst)
            if node.right: topdown(node.right, summ, pre, rst)
            
        if not root: return []
        rst = []
        topdown(root, sum, [], rst)
        return rst
```


**II). Backtracking**
| O(T): O(n) | O(S): O(h) | Rt: 44ms | 
```python
    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:
        def topdown(node, summ, path, rst):
            path.append(node.val)
            if not node.left and not node.right:
                if node.val == summ: rst.append(path[:])
            else:
                summ = summ-node.val
                if node.left: topdown(node.left, summ, path, rst)
                if node.right: topdown(node.right, summ, path, rst)
            path.pop()  #backtracking
            
        if not root: return
        rst = []
        topdown(root, sum, [], rst)
        return rst
```
Referrence: https://leetcode.com/problems/path-sum-ii/discuss/36683/DFS-with-one-LinkedList-accepted-java-solution


**III). Iteration -- Cache all State**
| O(T): O(n) | O(S): O(n) | Rt: 52ms | 
```python
    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:
        rst, s = [], [(root, sum, [])]
        while s:
            node, cursum, path = s.pop()
            if not node: continue
            if not node.left and not node.right:
                if cursum == node.val: 
                    rst.append(path + [cursum])
            else:
                cursum -= node.val
                s.append((node.right, cursum, path+[node.val]))
                s.append((node.left, cursum, path+[node.val]))
        return rst
```
Referrence: https://leetcode.com/problems/path-sum-ii/discuss/36829/Python-solutions-(Recursively-BFS%2Bqueue-DFS%2Bstack)


**IV). Iteration -- Backtracking**
| O(T): O(n) | O(S): O(1) | Rt: 44ms | 
```python
    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:
        rst, stack, path, cursum, prenode = [], [], [], 0, None
        while root or stack:
            while root:
                stack.append(root)
                path.append(root.val)
                cursum += root.val
                root = root.left
            #so far, node has no left child (or previous left has been traversed)
            node = stack[-1]  #here cannot pop
            if node.right and node.right != prenode:   #prenode is the last visited node
                root = node.right; continue   #stack the right branch until hit a leaf node
            #now, node is a leaf node or middle node. validate the sum
            if not node.left and not node.right and cursum == sum: rst.append(path[:])
            #backtrack, 
            prenode = node
            path.pop(); stack.pop()
            cursum -= node.val
        return rst
```
Referrence: https://leetcode.com/problems/path-sum-ii/discuss/36695/Java-Solution%3A-iterative-and-recursive