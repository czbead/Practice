**Get it Done, Make it Better, Share the Best -- Talse**
**I). MinMax: SuffixSum with DP**
| O(T): O() | O(S): O() | Rt: 64ms | 
```python
    def stoneGameII(self, piles: List[int]) -> int:
        def dfs(suffixSum, dp, M, st, l):
            if l-st <= 2*M: return suffixSum[st]
            if dp[st][M]: return dp[st][M]
            dp[st][M] = suffixSum[st] - min(dfs(suffixSum, dp, max(M, i), st+i, l) for i in range(1, 2*M+1))
            return dp[st][M]
        
        l = len(piles)
        suffixSum, dp = [0] * l, [[0] * l for _ in range(l)]
        suffixSum[-1] = piles[-1]
        for i in range(l-2, -1, -1): suffixSum[i] = suffixSum[i+1] + piles[i]
        return dfs(suffixSum, dp, 1, 0, l)
```
Referrence: https://leetcode.com/problems/stone-game-ii/discuss/345354/Java-DP-with-memorization-easy-to-understand(with-explanation)

Alternative: | Rt: 64ms |
```python
    def stoneGameII(self, piles: List[int]) -> int:
        def dfs(suffixSum, dp, M, st, l):
            if l-st <= 2*M: return suffixSum[st]
            if dp[st][M]: return dp[st][M]
            dp[st][M] = suffixSum[st] - min(dfs(suffixSum, dp, max(M, i), st+i, l) for i in range(1, 2*M+1))
            return dp[st][M]
        
        l = len(piles)
        dp = [[0] * l for _ in range(l)]
        for i in range(l-2, -1, -1): piles[i] += piles[i+1]
        return dfs(piles, dp, 1, 0, l)
```