**Get it Done, Make it Better, Share the Best -- Talse**
**I). Semaphore**
| O(T): O() | O(S): O() | Rt: 36ms | 
```python
from threading import Semaphore
class FizzBuzz:
    def __init__(self, n: int):
        self.n = n
        self.smp_f = Semaphore(0)
        self.smp_b = Semaphore(0)
        self.smp_fb = Semaphore(0)
        self.smp_n = Semaphore(1)

    # printFizz() outputs "fizz"
    def fizz(self, printFizz: 'Callable[[], None]') -> None:
    	for _ in range(self.n//3 - self.n//15):
            self.smp_f.acquire()
            printFizz()
            self.smp_n.release()

    # printBuzz() outputs "buzz"
    def buzz(self, printBuzz: 'Callable[[], None]') -> None:
    	for _ in range(self.n//5 - self.n//15):
            self.smp_b.acquire()
            printBuzz()
            self.smp_n.release()

    # printFizzBuzz() outputs "fizzbuzz"
    def fizzbuzz(self, printFizzBuzz: 'Callable[[], None]') -> None:
        for _ in range(self.n // 15):
            self.smp_fb.acquire()
            printFizzBuzz()
            self.smp_n.release()

    # printNumber(x) outputs "x", where x is an integer.
    def number(self, printNumber: 'Callable[[int], None]') -> None:
        for i in range(1, self.n+1):
            self.smp_n.acquire()
            if i % 5 == 0 and i % 3 == 0: 
                self.smp_fb.release()
            elif i % 5 == 0:
                self.smp_b.release()
            elif i % 3 == 0:
                self.smp_f.release()
            else:
                printNumber(i)
                self.smp_n.release()
```
Referrence: https://leetcode.com/problems/fizz-buzz-multithreaded/discuss/385368/Python-beats-100-using-Semaphore

