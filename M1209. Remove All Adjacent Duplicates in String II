**Get it Done, Make it Better, Share the Best -- Talse**
**I). Brute Force**
| O(T): O() | O(S): O() | Rt: ms | TLE
```python 
    def removeDuplicates(self, s: str, k: int) -> str:
        i = 0
        while i < len(s):
            j = i-1
            while j >=0 and s[j] == s[i]: j -= 1
            if s[j+1] * k == s[j+1:j+1+k]: 
                s = s[:j+1] + s[j+1+k:]
                i = j
            i += 1
        return s
```


**II). Stack**
| O(T): O(n) | O(S): O(n) | Rt: 80ms | 
```python
    def removeDuplicates(self, s: str, k: int) -> str:
        sl, stack = list(s), []
        while sl:
            cur = sl.pop()
            if stack and stack[-1][0] == cur: 
                stack[-1][1] += 1
                if stack[-1][1] >= k: stack.pop()
            else: stack.append([cur, 1])
        stack.reverse()
        return ''.join([i * j for i, j in stack])
```

Alternative: | Rt: 72ms |
```python
    def removeDuplicates(self, s: str, k: int) -> str:
        stack = []
        for i in s:
            if stack and stack[-1][0] == i: 
                stack[-1][1] += 1
                if stack[-1][1] >= k: stack.pop()
            else: stack.append([i, 1])
        return ''.join([i * j for i, j in stack])
```


Others: Two Pointer - https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string-ii/discuss/392933/JavaC%2B%2BPython-Two-Pointers-and-Stack-Solution
