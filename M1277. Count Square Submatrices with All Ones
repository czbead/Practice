**Get it Done, Make it Better, Share the Best -- Talse**
**I). DP Matrix Square**
| O(T): O(mn) | O(S): O(1) | Rt: 632ms | 
```python
    def countSquares(self, matrix: List[List[int]]) -> int:
        for i in range(1, len(matrix)):
            for j in range(1, len(matrix[0])):
                if matrix[i][j]:
                    matrix[i][j] = min(matrix[i-1][j], matrix[i][j-1], matrix[i-1][j-1]) + 1
        return sum(sum(row) for row in matrix)
```
Referrence: https://leetcode.com/problems/count-square-submatrices-with-all-ones/discuss/441306/JavaC%2B%2BPython-DP-solution
Comment: dp[i][j] is the maximum square can form end with matrix[i][j], also the number of unique squre can be formed end with this point. Problem 221 is very similar with this problem. 
