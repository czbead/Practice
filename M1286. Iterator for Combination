**Get it Done, Make it Better, Share the Best -- Talse**
**I). Backtracking with Generator**
| O(T): O() | O(S): O() | Rt: 52ms | 
```python
class CombinationIterator:

    def __init__(self, chars: str, comblen: int):
        self.generator = self.genNext(chars, [], comblen, 0)
        self.last, self.end = None, chars[-comblen:]
        
    def genNext(self, chars, path, coml, st):
        if coml == 0: yield ''.join(path); return
        for i in range(st, len(chars)):
            yield from self.genNext(chars, path+[chars[i]], coml-1, i+1)

    def next(self) -> str:
        self.last = next(self.generator)
        return self.last

    def hasNext(self) -> bool:
        return self.last != self.end
```
Referrence: https://leetcode.com/problems/iterator-for-combination/discuss/451260/python-using-generator

Alternative: | Rt: 52ms |
```python
class CombinationIterator:

    def __init__(self, chars: str, comblen: int):
        self.generator = self.backtrack(chars, [], comblen, 0)
        self.last, self.end = None, chars[-comblen:]
        
    def backtrack(self, chars, path, coml, st):
        if coml == 0: yield ''.join(path); return
        coml -= 1
        for i in range(st, len(chars)-coml):
            path.append(chars[i])
            yield from self.backtrack(chars, path, coml, i+1)
            path.pop()

    def next(self) -> str:
        self.last = next(self.generator)
        return self.last

    def hasNext(self) -> bool:
        return self.last != self.end
```


