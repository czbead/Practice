**Get it Done, Make it Better, Share the Best -- Talse**
**I). DFS -- Border Flood**
| O(T): O(n) | O(S): O(1) | Rt: 140ms | 
```python
    def solve(self, board: List[List[str]]) -> None:
        def paint(board, r, c, i, j):
            if i < 0 or i >= r or j < 0 or j >= c or board[i][j] != 'O': return
            board[i][j] = ' '
            paint(board, r, c, i+1, j)
            paint(board, r, c, i-1, j)
            paint(board, r, c, i, j+1)
            paint(board, r, c, i, j-1)
            
        if not board or not board[0]: return
        r, c = len(board), len(board[0])
        for i in range(r):
            paint(board, r, c, i, 0)
            paint(board, r, c, i, c-1)
        
        for j in range(c): 
            paint(board, r, c, 0, j)
            paint(board, r, c, r-1, j)
            
        for i in range(r):
            for j in range(c):
                if board[i][j] == ' ': board[i][j] = 'O'
                else: board[i][j] = 'X'
```

Alternative: BFS. | Rt: 152ms |
```python
    def solve(self, board: List[List[str]]) -> None:
        if not board: return
        r, c = len(board), len(board[0]) 
        q = collections.deque([])
        for i in range(r):
            for j in range(c):
                if board[i][j] == 'O' and (i == 0 or i == r-1 or j == 0 or j == c-1):
                    q.append((i, j))
                    
        while q:
            i, j = q.popleft(); board[i][j] = 1
            for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:
                if 0<=x<r and 0<=y<c and board[x][y]=='O':
                    q.append((x, y))
        
        for i in range(r):
            for j in range(c):
                if board[i][j] == 'O': board[i][j] = 'X'
                elif board[i][j] == 1: board[i][j] = "O"
```
Referrence: https://leetcode.com/problems/surrounded-regions/discuss/41652/Python-short-BFS-solution

Others: union find -- https://leetcode.com/problems/surrounded-regions/discuss/41617/Solve-it-using-Union-Find

