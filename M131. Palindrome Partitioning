**Get it Done, Make it Better, Share the Best -- Talse**
**I). Backtracking**
| O(T): O(n*2^n) | O(S): O(h) | Rt: 136ms | 
```python
    def partition(self, s: str) -> List[List[str]]:
        isPal = lambda s: all(s[i] == s[~i] for i in range(len(s)//2))
        def backtrack(s, st, end, candidate, rst):
            if st == end: rst.append(candidate); return
            for i in range(st+1, end+1):
                if isPal(s[st:i]):
                    backtrack(s, i, end, candidate + [s[st:i]], rst)
                
        rst = []
        backtrack(s, 0,len(s), [], rst)
        return rst
```
Alternative: save some space. | Rt: 132ms |
```python
    def partition(self, s: str) -> List[List[str]]:
        isPal = lambda s: all(s[i] == s[~i] for i in range(len(s)//2))
        def backtrack(s, st, end, candidate, rst):
            if st == end: rst.append(candidate[:]); return
            for i in range(st+1, end+1):
                if isPal(s[st:i]):
                    candidate.append(s[st:i])
                    backtrack(s, i, end, candidate, rst)
                    candidate.pop()
        rst = []
        backtrack(s, 0,len(s), [], rst)
        return rst
```
Referrence: https://leetcode.com/problems/palindrome-partitioning/discuss/41963/Java%3A-Backtracking-solution. Time Complexity - https://leetcode.com/problems/palindrome-partitioning/discuss/41963/Java:-Backtracking-solution./40308;
Triple: pythonic concise version. | Rt: 68ms |
```python
    def partition(self, s: str) -> List[List[str]]:
        def backtrack(s, candidate, rst):
            if not s: rst.append(candidate[:]); return
            for i in range(1, len(s)+1):
                #equal to s[:i] == s[:i][::-1]
                if s[:i] == s[i-1::-1]:
                    candidate.append(s[:i])
                    backtrack(s[i:], candidate, rst)
                    candidate.pop()
        rst = []
        backtrack(s, [], rst)
        return rst
```
Referrence: https://leetcode.com/problems/palindrome-partitioning/discuss/41973/Python-recursiveiterative-backtracking-solution/186120; https://stackoverflow.com/questions/509211/understanding-slice-notation;


**II). DP with Backtracking**
| O(T): O(n*n + 2^n) | O(S): O(h) | Rt: 64ms | 
```python
    def partition(self, s: str) -> List[List[str]]:
        def backtrack(s, dp, st, end, candidate, rst):
            if st == end: rst.append(candidate[:]); return
            for i in range(st, end):
                if dp[st][i]:
                    candidate.append(s[st:i+1])
                    backtrack(s, dp, i+1, end, candidate, rst)
                    candidate.pop()
                    
        l = len(s)
        dp = [[0]*l for _ in range(l)]
        for j in range(l):
            for i in range(j+1):
                if s[i] == s[j] and (j-i<=2 or dp[i+1][j-1]): dp[i][j] = 1
    
        rst = []
        backtrack(s, dp, 0, len(s), [], rst)
        return rst
```
Referrence: https://leetcode.com/problems/palindrome-partitioning/discuss/41982/Java-DP-%2B-DFS-solution


**III). Pure DP**
| O(T): O() | O(S): O() | Rt: 56ms | 
```python
    def partition(self, s: str) -> List[List[str]]:         
        if not s: return
        l = len(s)
        dp, rst = [[0]*l for _ in range(l)], [[] for _ in range(l+1)]
        rst[0].append([])
        for j in range(l):
            for i in range(j+1):
                if s[i] == s[j] and (j-i<=2 or dp[i+1][j-1]): 
                    dp[i][j] = 1
                    apal = s[i:j+1]
                    for lst in rst[i]:
                        rst[j+1].append(lst + [apal])
        return rst[-1]
```
Referrence: https://leetcode.com/problems/palindrome-partitioning/discuss/41974/My-Java-DP-only-solution-without-recursion.-O(n2)

