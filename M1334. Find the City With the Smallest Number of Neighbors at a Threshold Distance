**Get it Done, Make it Better, Share the Best -- Talse**
**I). Floyd-WarShall**
| O(T): O(n^3) | O(S): O(n^2) | Rt: 944ms | 
```python
    def findTheCity(self, n: int, edges: List[List[int]], distanceThreshold: int) -> int:
        graph = [[float('inf')] * n for _ in range(n)]
        for i, j, k in edges: graph[i][j] = graph[j][i] = k
        for i in range(n): graph[i][i] = 0
        for k in range(n):
            for i in range(n):
                for j in range(n):
                    graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j]) 

        city, neighbor = 0, float('inf')
        for i in range(n):
            ct = sum(graph[i][j] <= distanceThreshold for j in range(n))
            if ct < neighbor: city, neighbor = i, ct
            elif ct == neighbor: city = max(city, i)
        return city
```
Referrence: https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/discuss/490312/JavaC%2B%2BPython-Easy-Floyd-Algorithm

