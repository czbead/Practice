**Get it Done, Make it Better, Share the Best -- Talse**
**I). Brute Force**
| O(T): O() | O(S): O() | Rt: ms | TLE
```python
    def maxNumberOfFamilies(self, n: int, reservedSeats: List[List[int]]) -> int:
        def count(arr):
            if all(arr[i] == 0 for i in range(1, 9)): return 2
            if all(arr[i] == 0 for i in range(1, 5)) or all(arr[i] == 0 for i in range(3, 7)) or all(arr[i] == 0 for i in range(5, 9)): return 1
            return 0
        
        m = [[0]*10 for _ in range(n)]
        for i, j in reservedSeats: m[i-1][j-1] = 1
        return sum(count(m[i]) for i in range(n))
```

Alternative: using bit manipulation, TLE as Well. 
```python
    def maxNumberOfFamilies(self, n: int, reservedSeats: List[List[int]]) -> int:
        def count(n):
            if not n&0x01fe: return 2
            if not n&0x001e or not n&0x0078 or not n&0x01e0: return 1
            return 0
        
        m = [0] * n
        for i, j in reservedSeats: m[i-1] |= 1 << (j-1)
        return sum(count(i) for i in m)
```


**II). Pattern Match with HashMap**
| O(T): O(n) | O(S): O(n) | Rt: 656ms | 
```python
    def maxNumberOfFamilies(self, n: int, reservedSeats: List[List[int]]) -> int:
        def count(n):
            if not n&0x01fe: return 2
            if not n&0x001e or not n&0x0078 or not n&0x01e0: return 1
            return 0
        
        dt = {}
        for i, j in reservedSeats: dt[i] = dt.get(i, 0) | 1 << (j-1)
        return sum(count(dt[i]) for i in dt) + 2 * (n-len(dt))
```
Comment: cannot using array for this problem, the critical part of this problem is: 1 <= n <= 10^9; 1 <= reservedSeats.length <= min(10*n, 10^4)
