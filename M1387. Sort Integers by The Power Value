**Get it Done, Make it Better, Share the Best -- Talse**
**I). HashMap DP**
| O(T): O(n) | O(S): O(n) | Rt: 160ms | 
```python
    def getKth(self, lo: int, hi: int, k: int) -> int:
        def getPower(dt, num):
            if num in dt: return dt[num]
            if num & 1: dt[num] = getPower(dt, num*3+1) + 1
            else: dt[num] = getPower(dt, num//2) + 1
            return dt[num]
        
        dt, arr = {1: 0}, list(range(lo, hi+1))
        arr.sort(key = lambda x: (getPower(dt, x), x))
        return arr[k-1]
```

Alternative: iteratively fill some values in as much as possible. | Rt: 168ms |
```python
    def getKth(self, lo: int, hi: int, k: int) -> int:
        def getPower(dt, num):
            if num in dt: return dt[num]
            if num & 1: dt[num] = getPower(dt, num*3+1) + 1
            else: dt[num] = getPower(dt, num//2) + 1
            return dt[num]
        
        i, dt = 1, {1: 0}
        while i <= 3*hi + 1: dt[i<<1], i = dt[i]+1, i<<1
        arr = list(range(lo, hi+1))
        arr.sort(key = lambda x: (getPower(dt, x), x))
        return arr[k-1]
```
