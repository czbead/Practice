**Get it Done, Make it Better, Share the Best -- Talse**
**I). DFS**
| O(T): O() | O(S): O(mn) | Rt: 1488ms | 
```python
    def hasValidPath(self, grid: List[List[int]]) -> bool:
        def dfs(grid, dire, visited, r, c, i, j):
            if i == r-1 and j == c-1: return True
            visited[i][j] = 1
            for di, dj in dire[grid[i][j]-1]:
                x, y = i+di, j+dj
                #(-di, -dj) in dire[grid[x][y]-1] checks current street can connect back to previous route
                if 0<=x<r and 0<=y<c and not visited[x][y] and (-di, -dj) in dire[grid[x][y]-1]:
                    if dfs(grid, dire, visited, r, c, x, y): return True
            return False
            
        r, c = len(grid), len(grid[0])
        visited = [[0]*c for _ in range(r)]
        dire = [[(0,-1),(0,1)], [(-1,0),(1,0)], [(0,-1),(1,0)], [(0,1),(1,0)], [(0,-1),(-1,0)], [(0,1),(-1,0)]]
        return dfs(grid, dire, visited, r, c, 0, 0)
```
Referrence: https://leetcode.com/problems/check-if-there-is-a-valid-path-in-a-grid/discuss/547263/Python-easy-DFS


**II). BFS**
| O(T): O() | O(S): O() | Rt: 1468ms | 
```python
    def hasValidPath(self, grid: List[List[int]]) -> bool:
        r, c = len(grid), len(grid[0])
        visited, q = [[0]*c for _ in range(r)], collections.deque([(0, 0)])
        visited[0][0] = 1
        dire = [[(0,-1),(0,1)], [(-1,0),(1,0)], [(0,-1),(1,0)], [(0,1),(1,0)], [(0,-1),(-1,0)], [(0,1),(-1,0)]]
        while q:
            i, j = q.popleft()
            if i == r-1 and j == c-1: return True
            for di, dj in dire[grid[i][j]-1]:
                x, y = i+di, j+dj
                if 0<=x<r and 0<=y<c and not visited[x][y] and (-di, -dj) in dire[grid[x][y]-1]:
                    visited[x][y] = 1; q.append((x, y))
        return False
```
