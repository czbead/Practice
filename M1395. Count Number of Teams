**Get it Done, Make it Better, Share the Best -- Talse**
**I). Brute Force**
| O(T): O(n^3) | O(S): O(1) | Rt: 612ms | 
```python
    def numTeams(self, rating: List[int]) -> int:
        rst, l = 0, len(rating)
        for i in range(l-2):
            for j in range(i+1, l-1):
                if rating[j] <= rating[i]: continue
                for k in range(j+1, l):
                    if rating[k] <= rating[j]: continue
                    rst += 1
                    
        for i in range(l-2):
            for j in range(i+1, l-1):
                if rating[j] >= rating[i]: continue
                for k in range(j+1, l):
                    if rating[k] >= rating[j]: continue
                    rst += 1
        return rst
```


**II). Middle Soldier as Pivot, Count both Sides**
| O(T): O(n*n) | O(S): O(1) | Rt: 76ms | 
```python
    def numTeams(self, rating: List[int]) -> int:
        rst, l = 0, len(rating)
        for i in range(1, l-1):
            #l_small: on the left of i-th item and has value smaller than rating[i]
            #r_grate: on the right of i-th item and has value greater than rating[i]
            l_small = r_great = 0
            #r_small: on the right of i-th item and has value greater than rating[i]
            #l_grate: on the left of i-th item and has value smaller than rating[i]
            r_small = l_great = 0
            for j in range(l):
                if j < i:
                    if rating[j] < rating[i]: l_small += 1
                    elif rating[j] > rating[i]: l_great += 1
                elif j > i:
                    if rating[j] < rating[i]: r_small += 1
                    elif rating[j] > rating[i]: r_great += 1
            rst += l_small * r_great + r_small * l_great
        return rst
```
Referrence: https://leetcode.com/problems/count-number-of-teams/discuss/554795/C%2B%2BJava-O(n-*-n)-and-O(n-log-n)


Others: nlgn solution - https://leetcode.com/problems/count-number-of-teams/discuss/554795/C%2B%2BJava-O(n-*-n)-and-O(n-log-n)

