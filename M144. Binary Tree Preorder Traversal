**Get it Done, Make it Better, Share the Best -- Talse**
**I). Recursion**
| O(T): O(n) | O(S): O(h) | Rt: 28ms | 
```python
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        if not root: return []
        return [root.val] + self.preorderTraversal(root.left) + self.preorderTraversal(root.right)
```
Alternative: | Rt: 28ms |
```python
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        def preorder(node, rst):
            if not node: return
            rst.append(node.val)
            preorder(node.left, rst)
            preorder(node.right, rst)
        
        rst = []
        preorder(root, rst)
        return rst
```


**II). Iteration**
| O(T): O(n) | O(S): O(n) | Rt: 24ms | 
```python
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        rst, stack = [], []
        while stack or root:
            while root:
                rst.append(root.val)
                stack.append(root)
                root = root.left
            if stack: root = stack.pop().right
        return rst
```
Comment: this is the template solution, not very efficient actually. 
Alternative: forward left and stack right. | Rt: 16ms |
```python
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        rst, stack = [], []
        while root:
            rst.append(root.val)
            if root.right: stack.append(root.right)
            root = root.left
            if not root and stack: root = stack.pop()
        return rst
```
Comment: two routes, one with the node, the other with the stack, always give priority to the node movement. 
Referrence: https://leetcode.com/problems/binary-tree-preorder-traversal/discuss/45266/Accepted-iterative-solution-in-Java-using-stack.
Triple: stack node in preorder manner. | Rt: 24ms |
```python
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        rst, stack = [], [root]
        while stack:
            node = stack.pop()
            if not node: continue
            rst.append(node.val)
            stack.append(node.right)
            stack.append(node.left) 
        return rst
```
Referrence: https://leetcode.com/problems/binary-tree-preorder-traversal/discuss/45266/Accepted-iterative-solution-in-Java-using-stack./44818
