**Get it Done, Make it Better, Share the Best -- Talse**
**I). Convert to 2-Sum**
| O(T): O(n*n) | O(S): O(1) | Rt: 596ms | 
```python
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        rst, leng, target = [], len(nums), 0
        for i in range(leng - 2):
        	#this is very elegant to avoid repeated case.
            if i == 0 or (nums[i] != nums[i-1]):
                if nums[i] + nums[i+1] + nums[i+2] > target: break
                if nums[i] + nums[-1] + nums[-2] < target: continue
                curtar = target - nums[i]
                l, r = i+1, leng-1
                while l < r: 
                    cursum = nums[l] + nums[r]
                    if cursum > curtar: r -= 1
                    elif cursum < curtar: l += 1
                    else: 
                        rst.append((nums[i], nums[l], nums[r]))
                        #this is actually not correct, it should be l + 1 < r, the triple version is bug-free
                        while l < r and nums[l+1] == nums[l]: l += 1
                        while l < r and nums[r-1] == nums[r]: r -= 1
                        l, r = l+1, r-1
        return rst
```
Referrence: https://leetcode.com/problems/3sum/discuss/7380/Concise-O(N2)-Java-solution
Comment: It is really cool with the no repeat i condition. 
Alternative: concise without case check.  | Rt: 1496ms |
```python
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        rst, leng, target = set(), len(nums), 0
        for i in range(leng - 2):
            l, r, curtar = i+1, leng-1, target - nums[i]
            while l < r: 
                cursum = nums[l] + nums[r]
                if cursum > curtar: r -= 1
                elif cursum < curtar: l += 1
                else: 
                    rst.add((nums[i], nums[l], nums[r]))
                    l, r = l+1, r-1
        return rst
```
Triple: slightly improved, bug fixed. | Rt: 884ms |
```python
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        rst, leng, target = [], len(nums), 0
        for i in range(leng - 2):
            if i == 0 or (nums[i] != nums[i-1]):
                if nums[i] + nums[i+1] + nums[i+2] > target: break
                if nums[i] + nums[-1] + nums[-2] < target: continue
                curtar = target - nums[i]
                l, r = i+1, leng-1
                while l < r: 
                    cursum = nums[l] + nums[r]
                    if cursum > curtar: 
                        r -= 1
                        while l < r and nums[r] == nums[r+1]: r -= 1 
                    elif cursum < curtar: 
                        l += 1
                        while l < r and nums[l] == nums[l-1]: l += 1
                    else: 
                        rst.append((nums[i], nums[l], nums[r]))
                        l, r = l+1, r-1
                        while l < r and nums[l] == nums[l-1]: l += 1
                        while l < r and nums[r] == nums[r+1]: r -= 1
        return rst
``` 
Forth: using set instead. | Rt: 1228ms |
```python
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        rst, leng, target = set(), len(nums), 0
        for i in range(leng - 2):
            if i == 0 or nums[i] != nums[i-1]:
                if nums[i] + nums[i+1] + nums[i+2] > target: break
                if nums[i] + nums[-1] + nums[-2] < target: continue
                seen = set()
                for j in range(i+1, leng):
                    curtar = target - nums[i] - nums[j]
                    if curtar in seen: rst.add((nums[i], curtar, nums[j]))
                    else: seen.add(nums[j])
        return rst
```
Referrence: idea from https://leetcode.com/problems/3sum/discuss/7384/My-Python-solution-based-on-2-sum-200-ms-beat-93.37


