**Get it Done, Make it Better, Share the Best -- Talse**
**I). Generator**
| O(T): O(n) | O(S): O(1) | Rt: 84ms | 
```python
class BSTIterator:
    def gen(self, node):
        if node.left: yield from self.gen(node.left)
        yield node
        if node.right: yield from self.gen(node.right)

    def __init__(self, root: TreeNode):
        self.root = root
        self.cur = None
        self.iter = self.gen(self.root)
        maxnode = root
        while maxnode and maxnode.right: maxnode = maxnode.right
        self.maxNode = maxnode

    def next(self) -> int:
        if not self.root: return
        self.cur = next(self.iter)
        return self.cur.val

    def hasNext(self) -> bool:
        return (not self.cur and self.root) or self.cur != self.maxNode
```


**II). Stack**
| O(T): O(n) | O(S): O(n) | Rt: 156ms | 
```python
    def __init__(self, root: TreeNode):
        self.stack = []
        self.node = root

    def next(self) -> int:
        while self.node:
            self.stack.append(self.node)
            self.node = self.node.left
        if self.stack: 
            top = self.stack.pop()
            self.node = top.right
            return top.val
        return

    def hasNext(self) -> bool:
        return self.node is not None or self.stack
```
Alternative: | Rt: 116ms |
```python
    def __init__(self, root: TreeNode):
        self.stack = []
        self.stackAll(root)

    def next(self) -> int:
        top = self.stack.pop()
        self.stackAll(top.right)
        return top.val

    def hasNext(self) -> bool:
        return self.stack
    
    def stackAll(self, node):
        while node:
            self.stack.append(node)
            node = node.left
```
Referrence: https://leetcode.com/problems/binary-search-tree-iterator/discuss/52525/My-solutions-in-3-languages-with-Stack
