**Get it Done, Make it Better, Share the Best -- Talse**
**I). Flood Paint Surround**
| O(T): O(mn) | O(S): O(1) | Rt: 132ms | 
```python
    def numIslands(self, grid: List[List[str]]) -> int:
        def paint(grid, r, c, i, j):
            grid[i][j] = 0   #typo, anyway, doesn't matter as long as it is not '1'
            for x, y in [(i, j+1), (i, j-1), (i+1, j), (i-1, j)]:
                if 0 <= x < r and 0 <= y < c and grid[x][y]=='1': 
                    paint(grid, r, c, x, y)
        
        if not grid or not grid[0]: return 0
        rst, r, c = 0, len(grid), len(grid[0])
        for i in range(r):
            for j in range(c):
                if grid[i][j]=='1': 
                    paint(grid, r, c, i, j)
                    rst += 1
        return rst
```
Alternative: | Rt: 232ms |
```python
    def numIslands(self, grid: List[List[str]]) -> int:
        def check(grid, r, c, i, j):
            if grid[i][j] == '0': return 0
            grid[i][j] = '0'
            for x, y in [(i, j+1), (i, j-1), (i+1, j), (i-1, j)]:
                if 0 <= x < r and 0 <= y < c: 
                    check(grid, r, c, x, y)
            return 1
        
        if not grid or not grid[0]: return 0
        rst, r, c = 0, len(grid), len(grid[0])
        for i in range(r):
            for j in range(c):
                if check(grid, r, c, i, j): rst += 1
        return rst
```
Comment: enter a function stack as less as possible will save a lot of time. 
Triple: without modifying the input. | Rt: 280ms |
```python
    def numIslands(self, grid: List[List[str]]) -> int:
        def paint(grid, visited, r, c, i, j):
            visited[i][j] = 1
            for x, y in [(i, j+1), (i, j-1), (i+1, j), (i-1, j)]:
                if 0 <= x < r and 0 <= y < c and not visited[x][y] and grid[x][y]=='1': 
                    paint(grid, visited, r, c, x, y)
        
        if not grid or not grid[0]: return 0
        rst, r, c = 0, len(grid), len(grid[0])
        visited = [[0]*c for _ in range(r)]
        for i in range(r):
            for j in range(c):
                if not visited[i][j] and grid[i][j] == '1': 
                    rst += 1
                    paint(grid, visited, r, c, i, j)
        return rst
```
Forth: using data stack instead of function stack. | Rt: 256ms |
```python
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid or not grid[0]: return 0
        rst, r, c, stack = 0, len(grid), len(grid[0]), []
        for i in range(r):
            for j in range(c):
                if grid[i][j] == '1': 
                    rst += 1
                    grid[i][j] == '0'
                    stack = [(i, j)]
                    while stack:
                        x, y = stack.pop()
                        for m, n in [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]:
                            if 0 <= m < r and 0 <= n < c and grid[m][n] == '1':
                                grid[m][n] = '0'  #do this before stack, or get TLE
                                stack.append((m, n))
        return rst
```
Comment: you must update the '1' to '0' before stack the coordinator. Why? you can easily get dead loop because you revisited the old coordinator while it is still '1'.
Referrence: https://leetcode.com/problems/number-of-islands/discuss/56589/C%2B%2B-BFSDFS
