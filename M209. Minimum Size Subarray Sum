**Get it Done, Make it Better, Share the Best -- Talse**
**I). Two Pointer**
| O(T): O(n) | O(S): O(1) | Rt: 80ms | 
```python
    def minSubArrayLen(self, s: int, nums: List[int]) -> int:
        if not nums: return 0
        rst, l, st, summ = float('inf'), len(nums), 0, 0
        for i in range(l):
            summ += nums[i]
            while summ >= s:
                rst = min(rst, i-st+1)
                summ -= nums[st]
                st += 1
        if rst == float('inf'): return 0
        return rst
```

**II). NlogN Binary Search**
| O(T): O(nlogn) | O(S): O(n) | Rt: 76ms | 
```python
    def minSubArrayLen(self, s: int, nums: List[int]) -> int:
        if not nums: return 0
        l, rst = len(nums), float('inf')
        for i in range(1, l): nums[i] += nums[i-1]
        if nums[-1] < s: return 0
        return min(i - bisect.bisect(nums, nums[i]-s) for i in range(l) if nums[i] >= s) + 1
```

**III). Binary Search with Slide Window**
| O(T): O(nlgn) | O(S): O(1) | Rt: 148ms | 
```python
    def minSubArrayLen(self, s: int, nums: List[int]) -> int:
        def windowExist(nums, s, size):
            cur, pre = sum(nums[:size]), 0
            for i in range(size, len(nums)):
                if cur >= s: return True
                cur, pre = cur + nums[i] - nums[pre], pre+1
            return cur >= s
    
        if not nums: return 0
        l, r, rst = 1, len(nums), 0
        while l <= r:
            m = l + (r - l) // 2
            if windowExist(nums, s, m): rst, r = m, m - 1
            else: l = m + 1
        #cannot return l because sum(nums) may less than s, l will be the length, wrong
        return rst
```
Referrence: https://leetcode.com/problems/minimum-size-subarray-sum/discuss/59123/O(N)O(NLogN)-solutions-both-O(1)-space

