**Get it Done, Make it Better, Share the Best -- Talse**
**I). DP**
| O(T): O(n) | O(S): O(n) | Rt: 52ms | 
```python
    def rob(self, nums: List[int]) -> int:
        def helper(nums):
            if len(nums) == 1: return nums[0]
            a, b = 0, nums[0]
            for i in range(1, len(nums)):
                a, b = b, max(b, a+nums[i])
            return b
        
        if not nums: return 0
        if len(nums) == 1: return nums[0]
        return max(helper(nums[1:]), helper(nums[:-1]))
```
Comment: the first one and the last cannot be choosen together, this is the only difference. Should add a outer control. 
Alternative: 
```python
    def rob(self, nums: List[int]) -> int:
        def helper(nums, st, end):
            if st == end: return nums[st]
            a, b = 0, nums[st]
            for i in range(st+1, end+1):
                a, b = b, max(b, a+nums[i])
            return b
        
        if not nums: return 0
        l = len(nums)
        if l == 1: return nums[0]
        return max(helper(nums, 1, l-1), helper(nums, 0, l-2))
```
Referrence: https://leetcode.com/problems/house-robber-ii/discuss/59934/Simple-AC-solution-in-Java-in-O(n)-with-explanation

