**Get it Done, Make it Better, Share the Best -- Talse**
**I). Sort and Pop**
| O(T): O(nlgn) | O(S): O(1) | Rt: 32ms | 
```python
    def hIndex(self, citations: List[int]) -> int:
        citations.sort()
        l = len(citations)
        rst = 0
        while citations and citations[-1] > rst: 
            citations.pop()
            rst += 1
        return rst
```
Alternative: sort solution. | Rt: 28ms |
```python
    def hIndex(self, citations: List[int]) -> int:
        if not citations: return 0
        citations.sort(reverse=True)
        if citations[0] <= 0: return 0 
        for i in range(len(citations)):
            if citations[i] <= i: return i
        return len(citations)
```


**II). Bucket Sort**
| O(T): O(n) | O(S): O(n) | Rt: 44ms | 
```python
    def hIndex(self, citations: List[int]) -> int:
        l = len(citations)
        m = [0] * (l + 1)
        for i in citations:
            if i >= l: m[l] += 1
            else: m[i] += 1
        summ = 0
        for i in range(l, -1, -1):
            summ += m[i]
            if summ >= i: return i
        return 0
```
Referrence: https://leetcode.com/problems/h-index/discuss/70768/Java-bucket-sort-O(n)-solution-with-detail-explanation
Comment: this problem is more difficult to understand than solving it nicely. 
