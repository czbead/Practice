**Get it Done, Make it Better, Share the Best -- Talse**
**I). 3 State DP**
| O(T): O() | O(S): O() | Rt: 28ms | 
```python
    def maxProfit(self, prices: List[int]) -> int:
        buy, sell, cool = -float('inf'), 0, 0
        for i in prices:
        	#dp buy state; two cases: 1. not buy; buy from cool state;
            buy = max(buy, cool-i)
            #dp cool state; two cases: 1. stay cool; cool from sell state;
            cool = max(cool, sell)
            #dp sell state; two cases: 1. not sell; 2. sell from last buy state
            sell = buy + i
        return max(sell, cool)
```
Referrence: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/discuss/75928/Share-my-DP-solution-(By-State-Machine-Thinking)