**Get it Done, Make it Better, Share the Best -- Talse**
**I). Bit Manipulation -- Hash**
| O(T): O(mn) | O(S): O(nm) | Rt: 440ms | 
```python
    def maxProduct(self, words: List[str]) -> int:
        if not words: return 0
        l = len(words)
        rst, hashword = 0, [0] * l 
        for i in range(l):
            for j in words[i]:
                hashword[i] |= 1 << (ord(j) - ord('a'))
        for i in range(l):
            for j in range(i+1, l):
                if not (hashword[i] & hashword[j]): 
                    rst = max(rst, len(words[i]) * len(words[j]))
        return rst
```
Referrence: https://leetcode.com/problems/maximum-product-of-word-lengths/discuss/76959/JAVA-Easy-Version-To-Understand!!!!!!!!!!!!!!!!!
Comment: you can theoretically create a hashset for each word in words, they share the same idea. Hashset is much expensive than a 32-bit number. This solution uses a 32 bit number to do the hash job. We can do this simply because we only care about a letter appears or not (don't care how many times it appeared). Whey the alpha has 26 dimensions while a 32-bit can at most support 36 dimensions. 
Alternative: | Rt: 436ms |
```python
    def maxProduct(self, words: List[str]) -> int:
        if not words: return 0
        l = len(words)
        rst, hashword = 0, [0] * l 
        for i in range(l):
            for j in words[i]:
                hashword[i] |= 1 << (ord(j) - ord('a'))
            for j in range(i):
                if not (hashword[i] & hashword[j]): 
                    rst = max(rst, len(words[i]) * len(words[j]))
        return rst
```
Triple: using dict and set. | Rt: 192ms |
```python
    def maxProduct(self, words: List[str]) -> int:
        if not words: return 0
        dt = {}
        for word in words:
            h = 0
            for w in set(word): h |= 1 << (ord(w) - ord('a'))
            dt[h] = max(dt.get(h, 0), len(word))
        return max([dt[i] * dt[j] for i in dt for j in dt if not i & j] or [0])
```
Referrence: https://leetcode.com/problems/maximum-product-of-word-lengths/discuss/76970/Python-solution-beats-99.67