**Get it Done, Make it Better, Share the Best -- Talse**
**I). Cheat with Bisect**
| O(T): O(lgn) | O(S): O(1) | Rt: 84ms | 
```python
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        l, r = bisect.bisect_left(nums, target), bisect.bisect(nums, target)
        if l < len(nums) and nums[l] == target: return [l, r-1]
        return [-1, -1]
```


**II). Self Implement Binary Search**
| O(T): O() | O(S): O() | Rt: ms | 
```python
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        def bise_l(nums, tar, l, r):
            while l < r:
                m = l + (r-l)//2
                if nums[m] < tar: l = m + 1
                else: r = m
            return l if nums[l] == tar else -1
                
        def bise_r(nums, tar, l, r):
            while l < r:
                m = l + (r-l)//2
                if nums[m] <= tar: l = m + 1
                else: r = m
            return l-1 if nums[l-1] == tar else -1
        
        if not nums: return [-1, -1]
        le = len(nums)
        return [bise_l(nums, target, 0, le-1), bise_r(nums, target, 0, le)]
```
Alternative: adaptive search right index. | Rt: 76ms |
```python
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        def bise_l(nums, tar, l, r):
            while l < r:
                m = l + (r-l)//2
                if nums[m] < tar: l = m + 1
                else: r = m
            return l if nums[l] == tar else -1
                
        def bise_r(nums, tar, l, r):
            while l < r:
                m = l + (r-l)//2
                if nums[m] <= tar: l = m + 1
                else: r = m
            return l-1 if nums[l-1] == tar else -1
        
        if not nums: return [-1, -1]
        le = len(nums)
        l = bise_l(nums, target, 0, le-1)
        if l == -1: return [-1, -1]
        return [l, bise_r(nums, target, l, le)]
```
Triple: | Rt: 100ms |
```python
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        def bise(nums, tar, l, r, right=False):
            while l < r:
                m = l + (r-l)//2
                if nums[m] < tar: l = m + 1
                elif right and nums[m] == tar: l = m + 1
                else: r = m
            return l
        
        if not nums: return [-1, -1]
        le = len(nums)
        l = bise(nums, target, 0, le-1)
        if nums[l] != target: return [-1, -1]
        return [l, bise(nums, target, l, le, True)-1]
```


**III). Devide and  Conquer**
| O(T): O(lgn) | O(S): O(h) | Rt: 88ms | 
```python
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        def scan(nums, tar, l, r):
            if nums[l] == nums[r] == tar: return [l, r]
            if nums[l] <= tar <= nums[r]:
                m = l + (r-l) // 2
                lhalf, rhalf = scan(nums, tar, l, m), scan(nums, tar, m+1, r)
                if -1 in lhalf: return rhalf
                if -1 in rhalf: return lhalf
                return [lhalf[0], rhalf[-1]]
            return [-1, -1]
        
        return scan(nums, target, 0, len(nums)-1) if nums else [-1, -1]
```
Referrence: https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/discuss/14707/9-11-lines-O(log-n)


Others: a common cheat trick you can apply: https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/discuss/14699/Clean-iterative-solution-with-two-binary-searches-(with-explanation)/169923; https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/discuss/14701/A-very-simple-Java-solution-with-only-one-binary-search-algorithm;
