**Get it Done, Make it Better, Share the Best -- Talse**
**I). DP based on Math**
| O(T): O(n) | O(S): O(n) | Rt: 16ms | 
```python
    def integerBreak(self, n: int) -> int:
        dp = [1] * (n + 1)
        for i in range(3, n+1):
            if i > 4: dp[i] = 3 * max(dp[i-3], i-3)
            else: dp[i] = 2 * max(dp[i-2], i-2)
        return dp[-1]  
```
Referrence: https://leetcode.com/problems/integer-break/discuss/80721/Why-factor-2-or-3-The-math-behind-this-problem.
Alternative: | Rt: 24ms |
```python
    def integerBreak(self, n: int) -> int:
        if n == 2: return 1
        if n == 3: return 2
        pre =  1
        while n > 4: 
            pre *= 3
            n -= 3
        return pre * n
```
Referrence: https://leetcode.com/problems/integer-break/discuss/80689/A-simple-explanation-of-the-math-part-and-a-O(n)-solution


**II). Math Solution**
| O(T): O(lgn) | O(S): O(1) | Rt: 24ms | 
```python
    def integerBreak(self, n: int) -> int:
        if n == 2: return 1
        if n == 3: return 2
        a, b = divmod(n, 3)
        if b == 0: return 3 ** a
        if b == 1: return 3 ** (a-1) * 4  #1 * 3 < 2 * 2
        return 3 ** a * 2
```
Referrence: https://leetcode.com/problems/integer-break/discuss/80785/O(log(n))-Time-solution-with-explanation