**Get it Done, Make it Better, Share the Best -- Talse**
**I). DP: Two DP Lines**
| O(T): O(n) | O(S): O(n) | Rt: 32ms | 
```python
    def wiggleMaxLength(self, nums: List[int]) -> int:
        if not nums: return 0
        l = len(nums)
        #two dp array; up: the longest wiggle subsequence end with a increasing node
        #down: the longest wiggle subsequence end with a descending node
        #the sofar longest wiggle subsequence is: max(up[i], down[i])
        up, down = [0] * l, [0] * l
        up[0] = down[0] = 1
        for i in range(1, l):
            if nums[i] > nums[i-1]: 
                up[i] = down[i-1] + 1
                down[i] = down[i-1]
            elif nums[i] < nums[i-1]:
                down[i] = up[i-1] + 1
                up[i] = up[i-1]
            else:
                up[i], down[i] = up[i-1], down[i-1]
        return max(up[-1], down[-1])
```
Alternative: concise version. | Rt: 28ms |
```python
    def wiggleMaxLength(self, nums: List[int]) -> int:
        if not nums: return 0
        up = down = 1
        for i in range(1, len(nums)):
            if nums[i] > nums[i-1]: up = down + 1
            elif nums[i] < nums[i-1]: down = up + 1
        return max(up, down)
```
Referrence: https://leetcode.com/problems/wiggle-subsequence/discuss/84843/Easy-understanding-DP-solution-with-O(n)-Java-version


**II). Greedy**
| O(T): O(n) | O(S): O(1) | Rt: 32ms | 
```python
    def wiggleMaxLength(self, nums: List[int]) -> int:
        if not nums: return 0
        def sign(a, b):
            if a == b: return 0
            if a < b: return 1
            return -1
        pre, a, ct = 2, nums[0], 1
        for i in range(1, len(nums)):
            cur = sign(a, nums[i])
            if not cur: continue
            if cur != pre: 
                ct, a, pre = ct+1, nums[i], cur
            #want go down, goes up; or want go up, goes down; move the a pointer forward to make the wave more "sharp" (more extensible)
            else: a = nums[i]
        return ct
```
Alternative: | Rt: 32ms |
```python
    def wiggleMaxLength(self, nums: List[int]) -> int:
        if not nums: return 0
        pre, a, ct = None, nums[0], 1
        for i in range(1, len(nums)):
            if a == nums[i]: continue
            if pre is None or bool(a < nums[i]) != pre:
                pre, ct, a = bool(a < nums[i]), ct+1, nums[i] 
            else: a = nums[i]
        return ct
```
Referrence: https://leetcode.com/problems/wiggle-subsequence/discuss/84849/Very-Simple-Java-Solution-with-detail-explanation