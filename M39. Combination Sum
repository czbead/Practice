**Get it Done, Make it Better, Share the Best -- Talse**
**I). Backtracking**
| O(T): O() | O(S): O() | Rt: 96ms | 
```python
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        def backtrack(cand, tar, path, st, end, rst):
            if tar < 0: return
            if tar == 0: rst.append(path); return
            for i in range(st, end + 1):
            	#path + [] will return a new list instead of update path it self
                backtrack(cand, tar-cand[i], path+[cand[i]], i, end, rst)
            return rst
                                                   
        candidates.sort()  
        return backtrack(candidates, target, [], 0, len(candidates)-1, [])
```
Referrence: https://leetcode.com/problems/combination-sum/discuss/16502/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)
Alternative: | Rt: 52ms |
```python
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        def backtrack(cand, tar, path, st, end, rst):
            if tar < 0: return
            if tar == 0: rst.append(path); return
            for i in range(st, end + 1):
            	#save a lot of impossible combinations computing
                if cand[i] > tar: return 
                backtrack(cand, tar-cand[i], path+[cand[i]], i, end, rst)
                                                   
        #sort help avoid duplicate or repeadted result
        candidates.sort(); rst = []
        backtrack(candidates, target, [], 0, len(candidates)-1, rst)
        return rst
```
Referrence: https://leetcode.com/problems/combination-sum/discuss/16510/Python-dfs-solution./16391
Triple: no sort. | Rt: 84ms |
```python
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        def backtrack(cand, tar, path, st, end, rst):
            if tar < 0: return
            if tar == 0: rst.append(path); return
            for i in range(st, end + 1):
                backtrack(cand, tar-cand[i], path+[cand[i]], i, end, rst)
            return rst
        
        return backtrack(candidates, target, [], 0, len(candidates)-1, [])
```
Referrence: https://leetcode.com/problems/combination-sum/discuss/16510/Python-dfs-solution./244992
Comment: sort is not necessary if you don't want break out of the backtracking early. 


**II). DP**
| O(T): O(t*n) | O(S): O() | Rt: 80ms | 
```python
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        dp = [[] for _ in range(target+1)]
        for t in range(1, target+1):  #dp[t] saves all combinations have t sum
            for i in candidates:
                if i > t: break   #from now on, all sum > t, break out
                if i == t: dp[t].append([i]); break  #the element value equals to current target t
                #to ensure no duplicate, the later coming item should be strictly greater than previous ones, make the result a asc sequence. 
                dp[t].extend(path + [i] for path in dp[t-i] if i >= path[-1])
        return dp[-1]
```
Referrence: https://leetcode.com/problems/combination-sum/discuss/16509/Iterative-Java-DP-solution
