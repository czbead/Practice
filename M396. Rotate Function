**Get it Done, Make it Better, Share the Best -- Talse**
**I). Brute Force**
| O(T): O() | O(S): O() | Rt: ms | TLE 
```python
        if not A: return 0
        n = len(A)
        base = [(A[i], i) for i in range(n)]
        rst = -float('inf')
        for i in range(n):
            tmp = 0
            for a, b in base:
                tmp += a * ((b + i) % n)
            rst = max(rst, tmp)
        return rst
```
Alternative: | Rt: TLE |
```python 
    def maxRotateFunction(self, A: List[int]) -> int:
        if not A: return 0
        n, rst = len(A), -float('inf')
        for i in range(n):
            nums = [j % n for j in range(i, i + n)]
            tmp = sum(a * b for a, b in zip(A, nums))
            rst = max(rst, tmp)
        return rst 
```


**II). Math**
| O(T): O(n) | O(S): O(1) | Rt: 92ms | 
```python
    def maxRotateFunction(self, A: List[int]) -> int:
        if not A: return 0
        n = len(A)
        cur, summ = sum(A[i] * i for i in range(n)), sum(A)
        rst = cur
        for k in range(1, n):
            cur = cur + summ - n * A[n-k]
            rst = max(rst, cur)
        return rst
```
Referrence: https://leetcode.com/problems/rotate-function/discuss/87853/Java-O(n)-solution-with-explanation


