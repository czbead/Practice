**Get it Done, Make it Better, Share the Best -- Talse**
**I). Flip Index**
| O(T): O(n) | O(S): O(1) | Rt: 388ms | 
```python
    def findDuplicates(self, nums: List[int]) -> List[int]:
        if not nums: return 
        rst = []
        for i in nums:
            if nums[abs(i)-1] < 0: rst.append(abs(i))
            else: nums[abs(i)-1] = - nums[abs(i)-1]
        return rst
```
Referrence: I should have noticed that the input is bouded by input size which is quite obvious we should use this trick. Don't forget apply the abs(), the item could have been flipped already. Be careful about the input, it can be n (<= n), should flip abs(num)-1 instead. If you flip abs(num), it may cause index ouf ot bound error.
Alternative: someone may code like this. | Rt: 416ms |
```python
    def findDuplicates(self, nums: List[int]) -> List[int]:
        if not nums: return 
        rst = []
        for i in nums:
            if nums[abs(i)-1] < 0: rst.append(abs(i))
            nums[abs(i)-1] = - nums[abs(i)-1]
        return rst
```  
Comment: when you know a number appeared twice (it is now -num), you don't need to flip it back to positive. Well, it is not wrong if you insist on flipping it back, just slightly slower. 
