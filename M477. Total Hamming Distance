**Get it Done, Make it Better, Share the Best -- Talse**
**I). Brute Force**
| O(T): O() | O(S): O() | Rt: ms | TLE
```python
    def totalHammingDistance(self, nums: List[int]) -> int:
        def count(num):
            ct = 0
            while num:
                ct += 1
                num &= (num-1)
            return ct
        
        if not nums: return 0
        rst, l = 0, len(nums)
        for i in range(l-1):
            for j in range(i+1, l):
                rst += count(nums[i] ^ nums[j])
        return rst
```
Alternative: improve by counter. | Rt: ms | TLE
```python
    def totalHammingDistance(self, nums: List[int]) -> int:
        def count(num):
            ct = 0
            while num:
                ct += 1
                num &= (num-1)
            return ct
        
        if not nums: return 0
        ct = collections.Counter(nums)
        rst, stack = 0, list(ct)
        while stack:
            cur = stack.pop()
            frequency = ct[cur]
            for i in stack: rst += count(cur ^ i) * frequency * ct[i]
        return rst
```


**II). Bit Manipulation**
| O(T): O(n) | O(S): O(1) | Rt: 400ms | 
```python
    def totalHammingDistance(self, nums: List[int]) -> int:
        rst, mask, l = 0, 1, len(nums)
        for i in range(32):
            ct = 0
            for j in nums: 
                if j & mask: ct += 1
            rst += ct * (l - ct)
            mask <<= 1
        return rst
```
Referrence: https://leetcode.com/problems/total-hamming-distance/discuss/96226/Java-O(n)-time-O(1)-Space

