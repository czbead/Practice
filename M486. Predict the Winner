**Get it Done, Make it Better, Share the Best -- Talse**
**I). Recursion**
| O(T): O(n^2) | O(S): O(n^2) | Rt: 5504ms | 
```python
    def PredictTheWinner(self, nums: List[int]) -> bool:
        def pickmax(nums, l, r):
            if l == r: return nums[l]
            pickl = nums[l] - pickmax(nums, l+1, r)
            pickr = nums[r] - pickmax(nums, l, r-1)
            return max(pickl, pickr)
                
        if not nums: return
        return pickmax(nums, 0, len(nums)-1) >= 0
```
Referrence: https://leetcode.com/problems/predict-the-winner/discuss/96838/Java-'1-Line'-Recursive-Solution-O(n2)-Time-and-O(n)-Space

Alternaitve: using cache. | Rt: 32ms |
```python
    def PredictTheWinner(self, nums: List[int]) -> bool:
        def pickmax(nums, l, r, mem):
            if l == r: return nums[l]
            if (l, r) not in mem: 
                pickl = nums[l] - pickmax(nums, l+1, r, mem)
                pickr = nums[r] - pickmax(nums, l, r-1, mem)
                mem[(l, r)] = max(pickl, pickr)
            return mem[(l, r)]
                
        if not nums: return
        return pickmax(nums, 0, len(nums)-1, {}) >= 0
```

Triple: using nested list as cache. | Rt: 28ms |
```python
    def PredictTheWinner(self, nums: List[int]) -> bool:
        def pickmax(nums, l, r, mem):
            if mem[l][r] is None:
                if l == r: rst = nums[l]
                else:
                    pickl = nums[l] - pickmax(nums, l+1, r, mem)
                    pickr = nums[r] - pickmax(nums, l, r-1, mem)
                    rst = max(pickl, pickr)
                mem[l][r] = rst
            return mem[l][r]
                
        if not nums: return
        l = len(nums)
        mem = [[None] * l for _ in range(l)]
        return pickmax(nums, 0, len(nums)-1, mem) >= 0
```
Comment: the recusive dp is much more easy to understand the true iterative dp solution. Once you understand the recursive dp solution, the iterative dp is not that difficult to understand anymore. 


**II). DP: MinMax**
| O(T): O(n^2) | O(S): O(n^2) | Rt: 32ms | 
```python
    def PredictTheWinner(self, nums: List[int]) -> bool:
        if not nums: return 
        l = len(nums)
        dp = [[0] * l for _ in range(l)]
        for step in range(l):
            for st in range(0, l-step):
                end = st + step
                #only one number, choose it
                if end == st: dp[st][end] = nums[st]; continue
                dp[st][end] = max(nums[st] - dp[st+1][end], nums[end] - dp[st][end-1])
        return dp[0][-1] >= 0
```
Referrence: https://leetcode.com/problems/predict-the-winner/discuss/96828/JAVA-9-lines-DP-solution-easy-to-understand-with-improvement-to-O(N)-space-complexity.

Alternative: | Rt: 28ms |
```python
    def PredictTheWinner(self, nums: List[int]) -> bool:
        if not nums: return 
        l = len(nums)
        dp = [[0] * l for _ in range(l)]
        for i in range(l): dp[i][i] = nums[i]
        for step in range(1, l):
            for st in range(0, l-step):
                end = st + step
                dp[st][end] = max(nums[st] - dp[st+1][end], nums[end] - dp[st][end-1])
        return dp[0][-1] >= 0
``` 
Comment: this is a very complicated dp problem. What makes it harder than normal dp problems? I think we can call this dp as "nested dp" -- because both players play optimally, there are two dp going around this game, to be exact, the two dp are exactly the same dp strategy. This problem is classified as "Minmax" problem, this kind of problems are not easy ones. 

Others: here is a O(n) dp solution as well. https://leetcode.com/problems/predict-the-winner/discuss/96828/JAVA-9-lines-DP-solution-easy-to-understand-with-improvement-to-O(N)-space-complexity.