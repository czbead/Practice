**Get it Done, Make it Better, Share the Best -- Talse**
**I). DP**
| O(T): O(n * n) | O(S): O(n * n) | Rt: 1432ms | 
```python
    def longestPalindromeSubseq(self, s: str) -> int:
        if not s: return 
        l = len(s)
        dp = [[0] * l for _ in range(l)]
        for j in range(l):
            dp[j][j] = 1
            #start from the diagonal
            for i in range(j-1, -1, -1):
                if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2
                else: dp[i][j] = max(dp[i][j-1], dp[i+1][j])
        return dp[0][-1]
```
Alternative: recursive version. | Rt: 816ms |
```python
    def longestPalindromeSubseq(self, s: str) -> int:
        def recur(s, st, end, dp):
            if dp[st][end] is not None: return dp[st][end]
            if st > end: return 0
            if st == end: return 1
            if s[st] == s[end]: dp[st][end] = recur(s, st+1, end-1, dp) + 2
            else: dp[st][end] = max(recur(s, st+1, end, dp), recur(s, st, end-1, dp))
            return dp[st][end]
        
        if not s: return 
        l = len(s)
        dp = [[None] * l for _ in range(l)]
        return recur(s, 0, l-1, dp)
```
Referrence: https://leetcode.com/problems/longest-palindromic-subsequence/discuss/99101/Straight-forward-Java-DP-solution; here is a O(n) space dp solution https://leetcode.com/problems/longest-palindromic-subsequence/discuss/99111/Evolve-from-brute-force-to-dp; this one save space as well. https://leetcode.com/problems/longest-palindromic-subsequence/discuss/99129/Python-DP-O(n)-space-O(n2)-time;
Comment: I know most dp can save up memory by reduce the state scale, only use the essential state in dp process. Like this problem, it at most uses half of n*n, by reduction, you can reduce the memory to O(2n), and by further reduction, you can make it O(n). If you cannot work out this dp solution like me, it is a bad idea to know this memory trick. Just do the basic dp no matter how much memory it takes, when you get comfortable to all dp problems and techniques, revisit this part. 
