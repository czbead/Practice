**Get it Done, Make it Better, Share the Best -- Talse**
**I). Prefix Sum with Slide Window**
| O(T): O() | O(S): O() | Rt: ms | TLE
```python
    def findMaxLength(self, nums: List[int]) -> int:
        if not nums or len(nums) == 1: return 0
        l = len(nums)
        prefixsum = [0] * (l + 1)
        for i in range(1, l+1): prefixsum[i] = prefixsum[i-1] + nums[i-1]
        step = l if l % 2 == 0 else l - 1
        while step: 
            for i in range(l+1-step):
                j = i + step
                if prefixsum[j] - prefixsum[i] == step // 2: return step
            step -= 2
        return 0
```


**II). HashMap**
| O(T): O(n) | O(S): O(n) | Rt: 916ms | 
```python
    def findMaxLength(self, nums: List[int]) -> int:
        if not nums or len(nums) == 1: return 0
        dt, ct, rst = {0: 0}, 0, 0
        for i in range(len(nums)):
            if nums[i] == 1: ct += 1
            else: ct -= 1
            #(i + 1 - dt[ct]) is always a even number
            if ct in dt: rst = max(i+1-dt[ct], rst)
            else: dt[ct] = i+1
        return rst
```
Referrence: https://leetcode.com/problems/contiguous-array/discuss/99655/Python-O(n)-Solution-with-Visual-Explanation
Comment: explain why using "i + 1". Say the input list is of length 2, there should be 3 state: initial state (state 0): count nothing; state 1, count first item (nums[0]); state 2: count second item (nums[1]); Now you should have understood why we use 'i+1', if you are familiar with prefixsum, it should be very understanding. Another point, why "the distance" between two "equal count state" is always of even length? there is no such state that can remain the same as last state, each round, the count either go up or go down. To reach a "equal count state", it takes n pairs (up, down) of steps which is 2*n steps. 

