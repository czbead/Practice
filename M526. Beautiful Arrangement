**Get it Done, Make it Better, Share the Best -- Talse**
**I). Backtrack**
| O(T): O(n!) | O(S): O(n) | Rt: 1892ms | 
```python
    def countArrangement(self, N: int) -> int:
        def backtrack(used, path):
            if len(path) == N: return 1
            rst = 0 
            for i in range(1, N+1):
                if used[i]: continue
                if i % (len(path)+1) == 0 or (len(path)+1) % i == 0: 
                    used[i] = 1
                    rst += backtrack(used, path + [i])
                    used[i] = 0
            return rst
            
        return backtrack([0] * (N+1), [])
```

Alternative: save some space. | Rt: 1872ms |
```python
    def countArrangement(self, N: int) -> int:
        def backtrack(used, path):
            if len(path) == N: return 1
            rst = 0 
            for i in range(1, N+1):
                if used[i]: continue
                if i % (len(path)+1) == 0 or (len(path)+1) % i == 0: 
                    used[i] = 1
                    path.append(i)
                    rst += backtrack(used, path)
                    used[i] = 0
                    path.pop()
            return rst
            
        return backtrack([0] * (N+1), [])
```

Triple: using a index variable. | Rt: 1544ms |
```python
    def countArrangement(self, N: int) -> int:
        def backtrack(used, index, path):
            if index > N: return 1
            rst = 0 
            for i in range(1, N+1):
                if used[i]: continue
                if i % index == 0 or index % i == 0: 
                    used[i] = 1
                    path.append(i)
                    rst += backtrack(used, index + 1, path)
                    used[i] = 0
                    path.pop()
            return rst
            
        return backtrack([0] * (N+1), 1, [])
```
Referrence: https://leetcode.com/problems/beautiful-arrangement/discuss/99707/Java-Solution-Backtracking

Forth: using a hashmap to avoid recomputing duplicate case. | Rt: 124ms |
```python
    def countArrangement(self, N: int) -> int:
        def backtrack(used, index, path, dt):
            if index > N: return 1
            key = ''.join(used)
            if key in dt: return dt[key]
            rst = 0 
            for i in range(1, N+1):
                if used[i] == 'n': continue
                if i % index == 0 or index % i == 0: 
                    used[i] = 'n'
                    path.append(i)
                    rst += backtrack(used, index + 1, path, dt)
                    used[i] = 'y'
                    path.pop()
            dt[key] = rst
            return rst
        
        return backtrack(['y'] * (N+1), 1, [], {})
```
Referrence: https://leetcode.com/problems/beautiful-arrangement/discuss/99707/Java-Solution-Backtracking/221626S
