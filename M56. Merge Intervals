**Get it Done, Make it Better, Share the Best -- Talse**
**I). Sort Merge**
| O(T): O(nlgn) | O(S): O(1) | Rt: 88ms | 
```python
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        if len(intervals) < 2: return intervals
        intervals.sort()
        rst, l = [], len(intervals)
        for i in range(l):
            if i+1 < l and intervals[i+1][0] <= intervals[i][1]: intervals[i+1][0], intervals[i+1][1] = intervals[i][0], max(intervals[i][1], intervals[i+1][1])
            else: rst.append(intervals[i])
        return rst
```
Alternative: once merge all available. | Rt: 96ms |
```python
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        if len(intervals) < 2: return intervals
        intervals.sort()
        rst, leng, l, r = [], len(intervals), *intervals[0]
        for i in range(1, leng):
            if intervals[i][0] <= r:
                if r < intervals[i][1]: r = intervals[i][1]
            else: 
                rst.append([l, r])
                l, r = intervals[i]
        rst.append([l, r])
        return rst
```
Triple:  | Rt: 92ms |
```python
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        if len(intervals) < 2: return intervals
        intervals.sort()
        rst = [intervals[0]]
        for pair in intervals:
            if pair[0] <= rst[-1][1]: rst[-1][1] = max(rst[-1][1], pair[1])
            else: rst.append(pair)
        return rst
```


**II). Sort Both End**
| O(T): O(nlgn) | O(S): O(n) | Rt: 88ms | 
```python
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        if len(intervals) < 2: return intervals
        l = len(intervals)
        st, end, rst = [None] * l, [None] * l, []
        for ind, (i, j) in enumerate(intervals): st[ind], end[ind] = i, j
        st.sort(); end.sort();
        sti = endi = 0
        while endi < l:
            if endi == l-1 or st[endi + 1] > end[endi]: 
                rst.append([st[sti], end[endi]])
                sti = endi + 1
            endi += 1
        return rst
```
Referrence: https://leetcode.com/problems/merge-intervals/discuss/21223/Beat-98-Java.-Sort-start-and-end-respectively.
Comment: it is really hard to understand, I cannot clearly understand it yet. 

