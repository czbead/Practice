**Get it Done, Make it Better, Share the Best -- Talse**
**I). DFS**
| O(T): O() | O(S): O() | Rt: ms | TLE
```python
    def findPaths(self, m: int, n: int, N: int, i: int, j: int) -> int:
        def dfs(i, j, m, n, N, rst):
            if N < 0: return
            if i < 0 or i >= m or j < 0 or j >= n: rst[0] += 1; return
            for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:
                dfs(x, y, m, n, N-1, rst)
            
        rst = [0]
        dfs(i, j, m, n, N, rst)
        return rst[0] % (10 ** 9 + 7)
```

Alternative: DFS with cache. | Rt: 144ms | O(T): O(m*n*k) | O(S): O(mnk) |
```python
    def findPaths(self, m: int, n: int, N: int, i: int, j: int) -> int:
        def dfs(i, j, m, n, N, mem):
            if N < 0: return 0
            if i < 0 or i >= m or j < 0 or j >= n: return 1
            if mem[i][j][N] is not None: return mem[i][j][N]
            count = 0
            for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:
                count += dfs(x, y, m, n, N-1, mem)
            mem[i][j][N] = count
            return count % (10 ** 9 + 7)
            
        mem = [[[None]*(N+1) for _ in range(n)] for _ in range(m)]
        return dfs(i, j, m, n, N, mem)
```
Referrence: https://leetcode.com/problems/out-of-boundary-paths/discuss/119394/Java-DFS-with-memorization


**II). 3-D DP**
| O(T): O(mnk) | O(S): O(mnk) | Rt: 412ms | 
```python
    def findPaths(self, m: int, n: int, N: int, i: int, j: int) -> int:
        dp = [[[0]*(N+1) for _ in range(n)] for _ in range(m)]
        for o in range(1, N+1):
            for p in range(m):
                for q in range(n):
                    for x, y in [(p+1, q), (p-1, q), (p, q+1), (p, q-1)]:
                        if 0<=x<m and 0<=y<n: dp[p][q][o] += dp[x][y][o-1]
                        else: dp[p][q][o] += 1
        #this is only for passing oj, python is overflow-free.
        return dp[i][j][N] % (10 ** 9 + 7)  
```

Alternative: reduce space complexity to O(mn). | Rt: 356ms |
```python
    def findPaths(self, m: int, n: int, N: int, i: int, j: int) -> int:
        pre = [[0]*n for _ in range(m)]
        for _ in range(N):
            cur = [[0]*n for _ in range(m)]
            for p in range(m):
                for q in range(n):
                    for x, y in [(p+1, q), (p-1, q), (p, q+1), (p, q-1)]:
                        if 0<=x<m and 0<=y<n: cur[p][q] += pre[x][y]
                        else: cur[p][q] += 1
            pre = cur
        return pre[i][j] % (10 ** 9 + 7)
```
