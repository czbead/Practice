**Get it Done, Make it Better, Share the Best -- Talse**
**I). Sort then Brute Force with Break**
| O(T): O(n ^ 3) | O(S): O(1) | Rt: ms | TLE
```python
    def triangleNumber(self, nums: List[int]) -> int:
        nums.sort()
        rst, l = 0, len(nums)
        for i in range(l-2):
            # if i > 0 and nums[i] == nums[i-1]: continue
            for j in range(i+1, l-1):
                # if j > i+1 and nums[j] == nums[j-1]: continue
                for k in range(j+1, l):
                    # if l > j+1 and nums[k] == nums[k-1]: continue
                    if nums[k] >= (nums[i] + nums[j]): break
                    rst += 1
        return rst
```


**II). Three Pointer**
| O(T): O(n * n) | O(S): O(1) | Rt: 260ms | 
```python
    def triangleNumber(self, nums: List[int]) -> int:
        if not nums: return 0
        nums.sort()
        rst, l = 0, len(nums)
        for i in range(2, l):
            l, r = 0, i-1
            while l < r:
                if nums[l] + nums[r] > nums[i]:
                    #(l, r), (l+1, r), ..., (r-1, r), (r-l) pairs
                    rst += r-l
                    r -= 1
                else: l += 1
        return rst
```
Referrence: https://leetcode.com/problems/valid-triangle-number/discuss/104174/Java-O(n2)-Time-O(1)-Space
