**Get it Done, Make it Better, Share the Best -- Talse**
**I). NCR: Combination**
| O(T): O(mn) | O(S): O(1) | Rt: 28ms | 
```python
    def uniquePaths(self, m: int, n: int) -> int:
        ncr = lambda n, r: math.factorial(n) // math.factorial(r) // math.factorial(n-r)
        return ncr(m+n-2, n-1)
```
Alternative: self implement factorial. | Rt: 28ms |
```python
    def uniquePaths(self, m: int, n: int) -> int:
        def fac(n):
            rst = 1
            while n: rst, n = rst * n, n-1
            return rst
        
        ncr = lambda n, r: fac(n) // fac(r) // fac(n-r)
        return ncr(m+n-2, n-1)
```
Triple: | Rt: 28ms |
```python
    def uniquePaths(self, m: int, n: int) -> int:
        def ncr(n, r):
            r, rst = min(r, n-r), 1
            for i in range(n, n-r, -1): rst *= i
            for i in range(2, r+1): rst //= i
            return rst
        
        return ncr(m+n-2, n-1)
```


**II). DP**
| O(T): O(mn) | O(S): O(mn) | Rt: ms | TLE
```python
    def uniquePaths(self, m: int, n: int) -> int:
        if m == 1 or n == 1: return 1
        return self.uniquePaths(m-1, n) + self.uniquePaths(m, n-1)
```
Alternative: naive dp with memory.  | Rt: 32ms |
```python
    dt = {}
    def uniquePaths(self, m: int, n: int) -> int:
        if (m, n) in self.dt: return self.dt[(m, n)]
        if m == 1 or n == 1: rst = 1
        else: rst = self.uniquePaths(m-1, n) + self.uniquePaths(m, n-1)
        self.dt[(m, n)] = rst
        return rst
```
Triple: dp list. | Rt: 32ms |
```python
    def uniquePaths(self, m: int, n: int) -> int:
        dp = [[1]*m for _ in range(n)]
        for i in range(n):
            for j in range(m):
                if i == 0 or j == 0: continue
                dp[i][j] = dp[i-1][j] + dp[i][j-1]
        return dp[n-1][m-1]
```
Forth: concise dp. | Rt: 20ms |
```python
    def uniquePaths(self, m: int, n: int) -> int:
        dp = [1] * m
        for i in range(1, n):
            for j in range(1, m):
                dp[j] += dp[j-1]
        return dp[-1]
```
Referrence: https://leetcode.com/problems/unique-paths/discuss/22954/C%2B%2B-DP
Comment: we can simplify the dp to a 1-D array because we only take two rows data (see triple solution), and these two rows are actually same because dp[m][n] == dp[n][m]


