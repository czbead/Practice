**Get it Done, Make it Better, Share the Best -- Talse**
**I). DP Naive**
| O(T): O(n) | O(S): O(1) | Rt: 92ms | 
```python
    def minPathSum(self, grid: List[List[int]]) -> int:
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if i == 0 and j == 0: continue
                elif i == 0: grid[i][j] += grid[i][j-1]
                elif j == 0: grid[i][j] += grid[i-1][j]
                else: grid[i][j] += min(grid[i-1][j], grid[i][j-1])
        return grid[-1][-1]
```
Alternative: dont modify input. | O(S): O(mn) | Rt: 100ms |
```python
    def minPathSum(self, grid: List[List[int]]) -> int:
        r, c = len(grid), len(grid[0])
        dp = [[0]*c for _ in range(r)]
        for i in range(r):
            for j in range(c):
                if i == 0 and j == 0: dp[i][j] = grid[i][j]
                elif i == 0: dp[i][j] = dp[i][j-1] + grid[i][j]
                elif j == 0: dp[i][j] = dp[i-1][j] + grid[i][j]
                else: dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]
        return dp[-1][-1]
```
Triple: avoid bound check. | Rt: 100ms |
```python
    def minPathSum(self, grid: List[List[int]]) -> int:
        r, c = len(grid), len(grid[0])
        for j in range(1, c): grid[0][j] += grid[0][j-1]
        for i in range(1, r):
            grid[i][0] += grid[i-1][0]
            for j in range(1, c):
                grid[i][j] += min(grid[i-1][j], grid[i][j-1])
        return grid[-1][-1]
```
Referrence: https://leetcode.com/problems/minimum-path-sum/discuss/23457/C++-DP/242584
Forth: column by column. | Rt: 100ms |
```python
    def minPathSum(self, grid: List[List[int]]) -> int:
        r, c = len(grid), len(grid[0])
        dp = [0] * r; dp[0] = grid[0][0]
        for i in range(1, r): dp[i] = dp[i-1] + grid[i][0]
        for j in range(1, c):
            dp[0] += grid[0][j]
            for i in range(1, r):
                dp[i] = min(dp[i], dp[i-1]) + grid[i][j]
        return dp[-1]
```
Referrence: https://leetcode.com/problems/minimum-path-sum/discuss/23457/C%2B%2B-DP

