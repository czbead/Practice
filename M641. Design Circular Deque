**Get it Done, Make it Better, Share the Best -- Talse**
**I). Array with Two Pointer**
| O(T): O() | O(S): O() | Rt: 72ms | 
```python
class MyCircularDeque:

    def __init__(self, k: int):
        self.arr = [None] * k
        self.front = k-1
        self.rear = 0
        self.size = 0
        self.capacity = k

    def insertFront(self, value: int) -> bool:
        if self.isFull(): return False
        self.arr[self.front] = value
        self.front = (self.front - 1) % self.capacity
        self.size += 1
        return True

    def insertLast(self, value: int) -> bool:
        if self.isFull(): return False
        self.arr[self.rear] = value
        self.rear = (self.rear + 1) % self.capacity
        self.size += 1
        return True

    def deleteFront(self) -> bool:
        if self.isEmpty(): return False
        self.front = (self.front + 1) % self.capacity
        self.arr[self.front] = None
        self.size -= 1
        return True

    def deleteLast(self) -> bool:
        if self.isEmpty(): return False
        self.rear = (self.rear - 1) % self.capacity
        self.arr[self.rear] = None
        self.size -= 1
        return True

    def getFront(self) -> int:
        if self.isEmpty(): return -1
        return self.arr[(self.front + 1) % self.capacity]

    def getRear(self) -> int:
        if self.isEmpty(): return -1
        return self.arr[(self.rear - 1) % self.capacity]

    def isEmpty(self) -> bool:
        return self.size == 0

    def isFull(self) -> bool:
        return self.size == self.capacity
```

Alternative: | Rt: 76ms |
```python
class MyCircularDeque:

    def __init__(self, k: int):
        self.arr = [None] * k
        self.front = 0
        self.rear = 0

    def insertFront(self, value: int) -> bool:
        if self.isFull(): return False
        self.front = (self.front - 1) % len(self.arr)
        self.arr[self.front] = value
        return True

    def insertLast(self, value: int) -> bool:
        if self.isFull(): return False
        self.arr[self.rear] = value
        self.rear = (self.rear + 1) % len(self.arr)
        return True

    def deleteFront(self) -> bool:
        if self.isEmpty(): return False
        self.arr[self.front] = None
        self.front = (self.front + 1) % len(self.arr)
        return True

    def deleteLast(self) -> bool:
        if self.isEmpty(): return False
        self.rear = (self.rear - 1) % len(self.arr)
        self.arr[self.rear] = None
        return True

    def getFront(self) -> int:
        if self.isEmpty(): return -1
        return self.arr[self.front]

    def getRear(self) -> int:
        if self.isEmpty(): return -1
        return self.arr[(self.rear - 1) % len(self.arr)]

    def isEmpty(self) -> bool:
        return self.front == self.rear and self.arr[self.rear] is None

    def isFull(self) -> bool:
        return self.front == self.rear and self.arr[self.rear] is not None
```
