**Get it Done, Make it Better, Share the Best -- Talse**
**I). Recursive Tree Build**
| O(T): O(n * n) | O(S): O(n) | Rt: 240ms | 
```python
    def constructMaximumBinaryTree(self, nums: List[int]) -> TreeNode:
        def build(arr):
            if not arr: return
            maxi = 0
            for i in range(1, len(arr)):
                if arr[i] > arr[maxi]: maxi = i
            root = TreeNode(arr[maxi])
            root.left = build(arr[:maxi])
            root.right = build(arr[maxi+1:])
            return root
        return build(nums)
```


**II). Stack Previous Node in Desc Order**
| O(T): O(n) | O(S): O(n) | Rt: 192ms | 
```python
    def constructMaximumBinaryTree(self, nums: List[int]) -> TreeNode:
        stack = []
        for i in nums:
        	#insert the comming node into the tree.
            #for each comming node, we need to find its left child, and whoes right child it is
            #the stack is in descending order, node's left child is the max node whose val < 
            #the min nodde whose val > node.val, is the parent node of node.
            node, left_candidate = TreeNode(i), None
            while stack and stack[-1].val < i:
                left_candidate = stack.pop()
            node.left = left_candidate
            if stack: stack[-1].right = node
            stack.append(node)
        return stack[0]
```
Referrence: https://leetcode.com/problems/maximum-binary-tree/discuss/106156/Java-worst-case-O(N)-solution

