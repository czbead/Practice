**Get it Done, Make it Better, Share the Best -- Talse**
**I). DFS: Brute Force**
| O(T): O() | O(S): O() | Rt: ms | TLE 
```python
    def knightProbability(self, N: int, K: int, r: int, c: int) -> float:
        def dfs(N, K, i, j, dirs):
            if i < 0 or i >= N or j < 0 or j >= N: return 0
            if K == 0: return 1
            rate = 0
            for di, dj in dirs:
                rate += 0.125 * dfs(N, K-1, i+di, j+dj, dirs)
            return rate
        
        dirs = [(-2,-1), (-2, 1), (-1,-2), (-1,2), (1,-2), (1,2), (2,-1), (2,1)]
        return dfs(N, K, r, c, dirs)
```

Alternative: with state cache. | Rt: 188ms |
```python
    def knightProbability(self, N: int, K: int, r: int, c: int) -> float:
        def dfs(n, m, k, i, j, dirs):
            if i < 0 or i >= n or j < 0 or j >= n: return 0
            if k == 0: return 1
            if m[k][i][j] is not None: return m[k][i][j]
            rate = 0
            for di, dj in dirs:
                rate += 0.125 * dfs(n, m, k-1, i+di, j+dj, dirs)
            m[k][i][j] = rate
            return rate
        
        dirs = [(-2,-1), (-2, 1), (-1,-2), (-1,2), (1,-2), (1,2), (2,-1), (2,1)]
        m = [[[None]*N for _ in range(N)] for _ in range(K+1)]
        return dfs(N, m, K, r, c, dirs)
```
Referrence: https://leetcode.com/problems/knight-probability-in-chessboard/discuss/113954/Evolve-from-recursive-to-dpbeats-94


**II). DP: 3-D**
| O(T): O(mnk) | O(S): O(mnk) | Rt: 288ms | 
```python
    def knightProbability(self, N: int, K: int, r: int, c: int) -> float:
        dp = [[[0]*N for _ in range(N)] for _ in range(K+1)]
        dp[0][r][c] = 1
        dirs = [(-2,-1), (-2, 1), (-1,-2), (-1,2), (1,-2), (1,2), (2,-1), (2,1)]
        for k in range(1, K+1):
            for i in range(N):
                for j in range(N):
                    for di, dj in dirs:
                        x, y = i + di, j + dj
                        if x < 0 or x >= N or y < 0 or y >= N: continue
                        dp[k][i][j] += dp[k-1][x][y] * 0.125
        
        return sum(i for row in dp[-1] for i in row)
```
Referrence: https://leetcode.com/problems/knight-probability-in-chessboard/discuss/108214/My-easy-understand-dp-solution

