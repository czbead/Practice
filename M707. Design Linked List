**Get it Done, Make it Better, Share the Best -- Talse**
**I). Singly Linked List**
| O(T): O() | O(S): O() | Rt: 152ms | 
```python
class Node:
    
    def __init__(self, val=None, nxt=None):
        self.val = val
        self.next = nxt

class MyLinkedList:

    def __init__(self):
        self.head = None
        self.len = 0
        self.tail = None
        
    def getNthNode(self, index):
        if index >= self.len: return None
        cur = self.head
        for _ in range(index): cur = cur.next
        return cur

    def get(self, index: int) -> int:
        nth = self.getNthNode(index)
        if nth is None: return -1
        return nth.val

    def addAtHead(self, val: int) -> None:
        node = Node(val, self.head)
        self.head = node
        self.len += 1
        if self.len == 1: self.tail = node

    def addAtTail(self, val: int) -> None:
        node = Node(val)
        if self.tail is None: self.head = self.tail = node
        else: self.tail.next = node; self.tail = node;
        self.len += 1

    def addAtIndex(self, index: int, val: int) -> None:
        if index > self.len: return
        if index == self.len: self.addAtTail(val)
        elif index == 0: self.addAtHead(val)
        else:
            prenode = self.getNthNode(index-1)
            nxtnode = prenode.next
            prenode.next = Node(val, nxtnode)
            self.len += 1

    def deleteAtIndex(self, index: int) -> None:
        if index >= self.len: return
        if index == 0: 
            self.head = self.head.next
            self.len -= 1
            if self.len == 0: self.tail = None
        else:
            prenode = self.getNthNode(index - 1)
            prenode.next = prenode.next.next
            if index == self.len - 1: self.tail = prenode
            self.len -= 1
```

