**Get it Done, Make it Better, Share the Best -- Talse**
**I). DFS**
| O(T): O() | O(S): O() | Rt: ms | TLE
```python
    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, K: int) -> int:
        def dfs(route, k, st, end, cost):
            if st == end: return cost
            if k < 0: return float('inf')
            money = float('inf')
            for node, price in route[st]:
                money = min(money, dfs(route, k-1, node, end, cost+price))
            return money
        
        route = [[] for _ in range(n)]
        for i, j, k in flights: route[i].append((j, k))
        rst = dfs(route, K, src, dst, 0)
        return -1 if rst == float('inf') else rst
```

Alternative: with pruning. | Rt: 1244ms |
```python
    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, K: int) -> int:
        def dfs(route, k, st, end, cost, rst):
            if st == end: rst[0] = min(rst[0], cost); return
            if k < 0: return
            for node, price in route[st]:
                #prune
                if cost + price >= rst[0]: continue
                dfs(route, k-1, node, end, cost+price, rst)
        
        route = [[] for _ in range(n)]
        for i, j, k in flights: route[i].append((j, k))
        rst = [float('inf')]
        dfs(route, K, src, dst, 0, rst)
        if rst[0] == float('inf'): return -1
        return rst[0]
```
Referrence: https://leetcode.com/problems/cheapest-flights-within-k-stops/discuss/128217/Three-C%2B%2B-solutions-BFS-DFS-and-BF


**II). BFS**
| O(T): O() | O(S): O() | Rt: 108ms | 
```python
    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, K: int) -> int:
        route = [[] for _ in range(n)]
        for i, j, k in flights: route[i].append((j, k))
        rst, q = float('inf'), collections.deque([(src, 0)])
        #we need one more k time to check last round deposit
        while q and K >= -1:
            size, K = len(q), K-1
            for _ in range(size):
                i, cost = q.popleft()
                if i == dst: rst = min(rst, cost); continue
                for j, price in route[i]:
                    if cost + price >= rst: continue
                    q.append((j, cost + price))

        if rst == float('inf'): return -1
        return rst
```
Referrence: https://leetcode.com/problems/cheapest-flights-within-k-stops/discuss/128217/Three-C%2B%2B-solutions-BFS-DFS-and-BF


**III). Dijkstra with Heap: Shortest Path**
| O(T): O() | O(S): O() | Rt: 88ms | 
```python
    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, K: int) -> int:
        route = [[] for _ in range(n)]
        for i, j, k in flights: route[i].append((j, k))
        heap = [(0, src, K)]
        while heap:
            cost, i, k = heapq.heappop(heap)
            if i == dst: return cost
            if k < 0: continue
            for j, price in route[i]:
                heapq.heappush(heap, (cost+price, j, k-1))
        return -1
```
Referrence: https://leetcode.com/problems/cheapest-flights-within-k-stops/discuss/115541/JavaPython-Priority-Queue-Solution


**IV). Bellman-Ford**
| O(T): O() | O(S): O() | Rt: 152ms | 
```python
    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, K: int) -> int:
        cost = [float('inf')] * n
        cost[src] = 0
        #at most travel through K edges
        for _ in range(K+1):
            copy = cost[:]
            for i, j, p in flights:
                copy[j] = min(copy[j], cost[i]+p)
            cost = copy
        if cost[dst] == float('inf'): return -1
        return cost[dst]
```
Referrence: https://leetcode.com/problems/cheapest-flights-within-k-stops/discuss/115596/c%2B%2B-8-line-bellman-ford

