**Get it Done, Make it Better, Share the Best -- Talse**
**I). Binary Search**
| O(T): O(n) | O(S): O(1) | Rt: 52ms | 
```python
    def search(self, nums: List[int], target: int) -> bool:
        if not nums: return 
        l, r = 0, len(nums) - 1
        while l <= r:
            m = l + (r - l) // 2
            if nums[m] == target: return True
            if nums[l] < nums[m]:
                if nums[l] <= target and target < nums[m]: r = m-1
                else: l = m+1
            elif nums[m] < nums[r]:
                if target > nums[m] and target <= nums[r]: l = m+1
                else: r = m-1
            else: #special case
                if nums[l] == nums[m]: l += 1
                if nums[r] == nums[m]: r -= 1
        return False
```
Referrence: https://leetcode.com/problems/search-in-rotated-sorted-array-ii/discuss/28218/My-8ms-C++-solution-(o(logn)-on-average-o(n)-worst-case)/112460
Comment: all cases are edge case... This solution takes so long hours even with the referrence. 
Alternative: forward one side only.  | Rt: 52ms |
```python
    def search(self, nums: List[int], target: int) -> bool:
        if not nums: return 
        l, r = 0, len(nums) - 1
        while l <= r:
            m = l + (r - l) // 2
            if nums[m] == target: return True
            if nums[l] < nums[m]:
                if nums[l] > target or target > nums[m]: l = m+1
                else: r = m-1
            elif nums[m] < nums[l]:
                if target < nums[m] or target > nums[r]: r = m-1
                else: l = m+1
            else: #special case
                l += 1
        return False
```
Referrence: https://leetcode.com/problems/search-in-rotated-sorted-array-ii/discuss/28202/Neat-JAVA-solution-using-binary-search/27196
Triple: probably the best I can find. | Rt: 44ms |
```python
    def search(self, nums: List[int], target: int) -> bool:
        if not nums: return 
        l, r = 0, len(nums) - 1
        while l <= r:
            m = l + (r - l) // 2
            if nums[m] == target: return True
            if nums[l] < nums[m]:
                if nums[l] <= target < nums[m]: r = m-1
                else: l = m+1
            elif nums[m] < nums[l]:
                if nums[m] < target <= nums[r]: l = m+1
                else: r = m-1
            else: #special case
                l += 1
        return False
```
Referrence: https://leetcode.com/problems/search-in-rotated-sorted-array-ii/discuss/28212/When-there-are-duplicates-the-worst-case-is-O(n).-Could-we-do-better/27225

