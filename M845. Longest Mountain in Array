**Get it Done, Make it Better, Share the Best -- Talse**
**I). Left to right Scan**
| O(T): O(n) | O(S): O(1) | Rt: 184ms | 
```python
    def longestMountain(self, A: List[int]) -> int:
        rst, i, l = 0, 0, len(A)
        while i < l:
            while i < l-1 and A[i] >= A[i+1]: i += 1
            if i == l-1: break
            st = i
            while i < l-1 and A[i] < A[i+1]: i += 1
            if i == l-1: break
            if A[i] == A[i+1]: continue
            while i < l-1 and A[i] > A[i+1]: i += 1
            rst = max(rst, i-st+1)
        return rst
```

Alternative: centre scan. | Rt: 176ms |
```python
    def longestMountain(self, A: List[int]) -> int:
        rst, leng = 0, len(A)
        for i in range(1, leng-1):
            if A[i-1] < A[i] > A[i+1]:
                l, r = i-1, i+1
                while l > 0 and A[l-1] < A[l]: l -= 1
                while r < leng-1 and A[r+1] < A[r]: r += 1
                rst = max(rst, r - l + 1)
        return rst
```
Referrence: https://leetcode.com/problems/longest-mountain-in-array/discuss/135631/Python-7-lines-concise-O(N)-time-O(1)-space-solution

Triple: | Rt: 192ms |
```python
    def longestMountain(self, A: List[int]) -> int:
        rst = up = down = 0
        for i in range(1, len(A)):
            if down and A[i-1] < A[i] or A[i-1] == A[i]: up = down = 0
            up += A[i-1] < A[i]
            down += A[i-1] > A[i]
            if up and down: rst = max(rst, up+down+1)
        return rst
```
Referrence: https://leetcode.com/problems/longest-mountain-in-array/discuss/135593/C%2B%2BJavaPython-1-pass-and-O(1)-space
Comment: this solution is too tricky for me, I cannot even understand it solidly. 

