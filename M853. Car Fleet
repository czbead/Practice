**Get it Done, Make it Better, Share the Best -- Talse**
**I). Sort Position**
| O(T): O(nlgn) | O(S): O(n) | Rt: 312ms | 
```python
    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:
        l = len(position)
        time = [(target - position[i]) / speed[i] for i in range(l)]
        dt = {i: j for i, j in zip(position, time)}
        position.sort()
        r, seen, count = l-1, set(), 0
        while True:
            while r >= 0 and position[r] in seen: r -= 1
            if r == -1: return count
            count += 1
            for i in range(r+1):
                if dt[position[i]] <= dt[position[r]]: seen.add(position[i])
        return count
```


**II). Sort 2-D (Position, Speed)**
| O(T): O(nlgn) | O(S): O(n) | Rt: 188ms | 
```python
    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:
        time = [(target - i) / j for i, j in sorted(zip(position, speed), reverse=True)]
        pre = count = 0
        for t in time:
            if t > pre: 
                count += 1
                pre = t
            #otherwise, t <= pre; this car takes less time to reach the end, will catch up pre
        return count
```
Referrence: https://leetcode.com/problems/car-fleet/discuss/139850/C%2B%2BJavaPython-Straight-Forward

