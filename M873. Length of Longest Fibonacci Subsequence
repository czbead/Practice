**Get it Done, Make it Better, Share the Best -- Talse**
**I). Three Pointer with HashMap**
| O(T): O(n^3) | O(S): O() | Rt: 1316ms | 
```python
    def lenLongestFibSubseq(self, A: List[int]) -> int:
        l = len(A)
        dt = {A[i]: i for i in range(l)}
        mx = 0
        for i in range(l-2):
            for j in range(i+1, l-1):
                a, b, ct = A[i], A[j], 2
                while a + b in dt:
                    a, b, ct = b, a + b, ct+1
                mx = max(mx, ct)
        return mx if mx > 2 else 0
```
Referrence: https://leetcode.com/problems/length-of-longest-fibonacci-subsequence/discuss/152343/C%2B%2BJavaPython-Check-Pair


**II). DP with HashMap**
| O(T): O(n * n) | O(S): O(n * n) | Rt: 696ms | 
```python
    def lenLongestFibSubseq(self, A: List[int]) -> int:
        l, mx, pre = len(A), 0, {}
        #dp[i][j]: a valid fib sequence end at i index, starts at j index
        dp = [[0] * l for _ in range(l)]
        for i in range(l):
        	#the pre dict saves potential intermedia num
            pre[A[i]] = i
            for j in range(i):
                a = A[i] - A[j]
                if a < A[j] and a in pre:
                	#A[j] + a = A[i], consists a fib sequence;
                    dp[i][j] = dp[j][pre[a]] + 1
                    mx = max(mx, dp[i][j])
        return mx if mx == 0 else mx + 2
```
Referrence: https://leetcode.com/problems/length-of-longest-fibonacci-subsequence/discuss/152343/C++JavaPython-Check-Pair/157231; https://leetcode.com/problems/length-of-longest-fibonacci-subsequence/discuss/152332/Java-clean-DP-O(n2)-time-O(n2)-space;


**III). DP with 2-Sum**
| O(T): O(n*n) | O(S): O(n*n) | Rt: 880ms | 
```python
    def lenLongestFibSubseq(self, A: List[int]) -> int:
        l, mx = len(A), 0
        dp = [[0] * l for _ in range(l)]
        for i in range(2, l):
            l, r = 0, i-1
            while l < r:
                cur = A[l] + A[r]
                if cur < A[i]: l += 1
                elif cur > A[i]: r -= 1
                else: 
                    #dp[i][j], the len of fib sequence start at i and end at j
                    dp[r][i] = dp[l][r] + 1
                    mx = max(mx, dp[r][i])
                    l, r = l+1, r-1
        return mx if mx == 0 else mx + 2
```
Referrence: https://leetcode.com/problems/length-of-longest-fibonacci-subsequence/discuss/165330/Java-beat-98-DP-%2B-2Sum
