**Get it Done, Make it Better, Share the Best -- Talse**
**I). Brute Force with Pruning**
| O(T): O(n*n) | O(S): O() | Rt: ms | TLE 
```python
    def subarrayBitwiseORs(self, A: List[int]) -> int:
        rst, l = set(), len(A)
        for i in range(l):
            if i > 0 and A[i] == A[i-1]: continue
            cur = A[i]
            rst.add(cur)
            for j in range(i+1, l):
                if A[j] == A[j-1]: continue
                cur |= A[j]
                rst.add(cur)
        return len(rst)
```

Others: here are some O(KN) solutions I cannot quite follow - https://leetcode.com/problems/bitwise-ors-of-subarrays/discuss/165881/C%2B%2BJavaPython-O(30N); https://leetcode.com/problems/bitwise-ors-of-subarrays/discuss/165859/C%2B%2B-O(kN)-solution