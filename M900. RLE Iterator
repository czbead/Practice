**Get it Done, Make it Better, Share the Best -- Talse**
**I). Pair Pop**
| O(T): O() | O(S): O() | Rt: 32ms | 
```python
    def __init__(self, A: List[int]):
        self.arr = []
        for i in range(0, len(A), 2):
            if A[i] > 0: self.arr.append([A[i+1], A[i]])
        self.arr.reverse()

    def next(self, n: int) -> int:
        while self.arr and n:
            if n <= self.arr[-1][1]: self.arr[-1][1] -= n; break
            n -= self.arr.pop()[1]
        if self.arr: return self.arr[-1][0]
        return -1
```

Alternative: straightforward solution. | Rt: 36ms |
```python
    def __init__(self, A: List[int]):
        self.arr = A
        self.i = 0

    def next(self, n: int) -> int:
        while self.i < len(self.arr) and n > self.arr[self.i]:
            n -= self.arr[self.i]
            self.i += 2
        if self.i >= len(self.arr): return -1
        self.arr[self.i] -= n
        return self.arr[self.i+1]
```
Referrence: https://leetcode.com/problems/rle-iterator/discuss/168294/Java-Straightforward-Solution-O(n)-time-O(1)-space
