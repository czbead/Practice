**Get it Done, Make it Better, Share the Best -- Talse**
**I). DP**
| O(T): O(n) | O(S): O(n) | Rt: 24ms | 
```python
    def numDecodings(self, s: str) -> int:
        if not s: return 0
        dp = [0] * (len(s) + 1)
        dp[0] = 1  #tricky part; for setting dp[2] purpose
        if s[0] != '0': dp[1] = 1
        for i in range(2, len(s) + 1):
            two = int(s[i-2:i])
            if s[i-1] != '0': dp[i] += dp[i-1]
            if 9 < two <= 26: dp[i] += dp[i-2] 
        return dp[-1]
```
Alternative: without dp[0]; | Rt: 32ms |
```python
    def numDecodings(self, s: str) -> int:
        if not s: return 0
        dp = [0] * len(s)
        if s[0] != '0': dp[0] = 1
        for i in range(1, len(s)):
            two = int(s[i-1:i+1])
            if s[i] != '0': dp[i] += dp[i-1]
            if 9 < two <= 26: dp[i] += dp[i-2] if i > 1 else 1  #avoid overflow
        return dp[-1]
```
Referrence: https://leetcode.com/problems/decode-ways/discuss/30358/Java-clean-DP-solution-with-explanation
Triple: bottom up. | Rt: 36ms |
```python
    def numDecodings(self, s: str) -> int:
        if not s: return 0
        l = len(s)
        dp = [0] * (l + 1)
        dp[-1] = 1
        for i in range(l-1, -1, -1):
            if s[i] == '0': dp[i] = 0
            else:
                dp[i] = dp[i+1] 
                if i < l-1 and 9 < int(s[i: i+2]) <= 26: dp[i] += dp[i+2]
        return dp[0]
```
Forth: constant space. | Rt: 28ms |
```python
    def numDecodings(self, s: str) -> int:
        if not s: return 0
        a, b, l = 0, 1, len(s)
        for i in range(l-1, -1, -1):
            if s[i] == '0': cur = 0
            else:
                cur = b 
                if i < l-1 and 9 < int(s[i: i+2]) <= 26: cur += a
            a, b = b, cur
        return b
```
Referrence: https://leetcode.com/problems/decode-ways/discuss/30451/Evolve-from-recursion-to-dp
Comment: it is really hard to derive a constant space solution in top down fashion because of the existence of cases like "110" (the last state will be 0); In conclusion, bottom up DP is a more natural approach for this problem.  


**II). Recursion -- DP**
| O(T): O() | O(S): O() | Rt: ms | TLE / 223 / 258 test cases passed.
```python
    def numDecodings(self, s: str, st=0) -> int:
        if not s: return 0
        if st > len(s): return 0  #this is a invalid path
        if st == len(s): return 1  #one possible path lead to the end
        if s[st] == '0': return 0  #this is a dead end
        rst = self.numDecodings(s, st+1)
        if int(s[st:st+2]) <= 26: rst += self.numDecodings(s, st+2)
        return rst
```
Alternative: recursion with cache. | Rt: 32ms |
```
    def numDecodings(self, s: str, st=0) -> int:
        def recur(s, st, cache):
            if st in cache: return cache[st]
            if s[st] == '0': cache[st] = 0; return 0
            rst = recur(s, st+1, cache)
            if st < len(s) - 1 and int(s[st:st+2]) <= 26: rst += recur(s, st+2, cache)
            cache[st] = rst
            return rst
        
        if not s: return 0
        l = len(s)
        cache = {l: 1}
        return recur(s, 0, cache)
```
Referrence: https://leetcode.com/problems/decode-ways/discuss/30451/Evolve-from-recursion-to-dp/112491



