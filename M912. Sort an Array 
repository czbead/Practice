**Get it Done, Make it Better, Share the Best -- Talse**
**I). Bubble Sort**
| O(T): O(n*n) | O(S): O(1) | Rt: ms | TLE
```python
    def sortArray(self, nums: List[int]) -> List[int]:
        if not nums: return nums
        l = len(nums)
        for i in range(l):
            for j in range(i, l):
                if nums[j] < nums[i]: 
                    nums[j], nums[i] = nums[i], nums[j]
        return nums
```

**II). Select Sort**
| O(T): O(n*n) | O(S): O(1) | Rt: ms | TLE
```python
    def sortArray(self, nums: List[int]) -> List[int]:
        if not nums: return nums
        l = len(nums)
        for i in range(l):
            minIdx = i
            for j in range(i, l):
                if nums[j] < nums[minIdx]: minIdx = j
            if minIdx != i: nums[i], nums[minIdx] = nums[minIdx], nums[i]
        return nums
```

**III). Insert Sort**
| O(T): O(n*n) | O(S): O(1) | Rt: ms | TLE
```python
    def sortArray(self, nums: List[int]) -> List[int]:
        if not nums: return nums
        l = len(nums)
        for i in range(1, l):
            val, j = nums[i], i-1
            while j >= 0 and nums[j] > val:
                nums[j+1] = nums[j]
                j -= 1
            nums[j+1] = val
        return nums
```

**IV). Merge Sort**
| O(T): O(nlgn) | O(S): O(n) | Rt: 332ms | 
```python
    def sortArray(self, nums: List[int]) -> List[int]:
        def mergeSort(nums, l, r):
            if l == r: return [nums[l]]
            m = (l+r) // 2
            left = mergeSort(nums, l, m)
            right = mergeSort(nums, m+1, r)
            return merge(left, right)
            
        def merge(a, b):
            i, j, la, lb, rst = 0, 0, len(a), len(b), []
            while i < la and j < lb:
                if a[i] <= b[j]: rst.append(a[i]); i += 1
                else: rst.append(b[j]); j += 1
            if i < la: rst += a[i:]
            if j < lb: rst += b[j:]
            return rst
        
        return mergeSort(nums, 0, len(nums)-1)
```

Alternative: iterative merge sort | Rt: 332ms |
```python
    def sortArray(self, nums: List[int]) -> List[int]:
        def merge(a, b):
            i, j, la, lb, rst = 0, 0, len(a), len(b), []
            while i < la and j < lb:
                if a[i] <= b[j]: rst.append(a[i]); i += 1
                else: rst.append(b[j]); j += 1
            if i < la: rst += a[i:]
            if j < lb: rst += b[j:]
            return rst
        
        if not nums: return []
        l, step = len(nums), 1
        while step < l:
            left = 0
            while left < l-step:
                mid = left+step
                right = min(left+2*step, l)
                nums[left: right] = merge(nums[left:mid], nums[mid:right])
                left = right
            step *= 2
        return nums
```

**V). Quick Sort**
| O(T): O(nlgn) | O(S): O(1) | Rt: 276ms | 
```python
    def sortArray(self, nums: List[int]) -> List[int]:
        def quickSort(nums, l, r):
            if l >= r: return 
            p = partition(nums, l, r)
            quickSort(nums, l, p-1)
            quickSort(nums, p+1, r)
            
        def partition(nums, st, end):
            ra = random.randint(st, end)
            nums[end], nums[ra] = nums[ra], nums[end]
            l, r = st, end-1
            while l <= r:
                if nums[l] <= nums[end]: l += 1
                elif nums[r] >= nums[end]: r -= 1
                else:
                    nums[l], nums[r] = nums[r], nums[l]
                    l, r = l+1, r-1
            nums[l], nums[end] = nums[end], nums[l]
            return l
            
        quickSort(nums, 0, len(nums)-1)
        return nums
```

Alternative: | Rt: 308ms |
```python
    def sortArray(self, nums: List[int]) -> List[int]:
        def quickSort(nums, l, r):
            if l >= r: return 
            p = partition(nums, l, r)
            quickSort(nums, l, p-1)
            quickSort(nums, p+1, r)
            
        def partition(nums, st, end):
            ra = random.randint(st, end)
            nums[end], nums[ra] = nums[ra], nums[end]
            l, r = st, end-1
            while l <= r:
                if nums[l] <= nums[end]: l += 1
                elif nums[r] >= nums[end]: r -= 1
                else:
                    nums[l], nums[r] = nums[r], nums[l]
                    l, r = l+1, r-1
            nums[l], nums[end] = nums[end], nums[l]
            return l
            
        quickSort(nums, 0, len(nums)-1)
        return nums
```
Others: here is a shortcut quick sort - https://leetcode.com/problems/sort-an-array/discuss/277127/7-line-quicksort-to-write-in-interviews-(Python)
