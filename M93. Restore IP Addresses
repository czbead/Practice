**Get it Done, Make it Better, Share the Best -- Talse**
**I). Brute Force**
| O(T): O(n ^ 3) | O(S): O(1) | Rt: 32ms | 
```python
    def restoreIpAddresses(self, s: str) -> List[str]:
        def isvalid(s):
            l = len(s)
            if l == 0 or l > 3 or (l > 1 and s[0] == '0') or int(s) > 255: return False
            return True
        
        rst, l = [], len(s)
        for i in range(1, 4):
            if i >= l - 2: break
            for j in range(i+1, i+4):
                if j >= l-1: break
                for k in range(j+1, j+4):
                    if k > l-1: break
                    candidate = [s[:i], s[i:j], s[j:k], s[k:]]
                    if all(isvalid(x) for x in candidate): 
                        rst.append('.'.join(candidate))
        return rst
```
Referrence: https://leetcode.com/problems/restore-ip-addresses/discuss/30949/My-code-in-Java
Alternative: | Rt: 24ms |
```python
    def restoreIpAddresses(self, s: str) -> List[str]:
        rst, l = [], len(s)
        for i in range(1, 4):
            if i >= l - 2: break
            if l - i > 9: continue
            for j in range(i+1, i+4):
                if j >= l - 1: break
                if l - j > 6: continue
                for k in range(j+1, j+4):
                    if k > l - 1: break
                    if l - k > 3: continue
    
                    candidate = [int(s[:i]), int(s[i:j]), int(s[j:k]), int(s[k:])]
                    if all(x <= 255 for x in candidate): 
                        string = '.'.join(map(str, candidate))
                        if len(string) == l + 3: rst.append(string)
        return rst
```
Referrence: https://leetcode.com/problems/restore-ip-addresses/discuss/30998/My-concise-AC-java-code


**II). Backtracking**
| O(T): O() | O(S): O() | Rt: 28ms | 
```python
    def restoreIpAddresses(self, s: str) -> List[str]:
        def backtrack(s, ct, path, rst):
            if ct == 4:
                #have 4 chunk and use up all digits
                if not s: rst.append(path[:-1]) 
                return
            for i in range(1, 4):
                #prevent index overflow
                if i > len(s): continue
                #take 1 digit is always good
                #take 2 or 3 digits, first digit cannot be '0'
                if i > 1 and s[0] == '0': continue
                #take 3 digits, cannot greater than 255
                if i > 2 and int(s[:3]) > 255: continue
                backtrack(s[i:], ct+1, path + s[:i] + '.', rst)
            
        rst = []
        backtrack(s, 0, '', rst)
        return rst
```
Referrence: inspired by post - https://leetcode.com/problems/restore-ip-addresses/discuss/31140/Python-easy-to-understand-solution-with-comments-(backtracking)
Others: here are some other recursion (dfs, backtracking) solutions - https://leetcode.com/problems/restore-ip-addresses/discuss/30949/My-code-in-Java/29818; https://leetcode.com/problems/restore-ip-addresses/discuss/30944/Very-simple-DFS-solution