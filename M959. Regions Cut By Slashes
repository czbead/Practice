**Get it Done, Make it Better, Share the Best -- Talse**
**I). Compose the Matrix and Count Islands**
| O(T): O() | O(S): O() | Rt: 340ms | 
```python
    def regionsBySlashes(self, grid: List[str]) -> int:
        def dfs(m, row, col, i, j):
            if 0<=i<row and 0<=j<col and m[i][j]:
                m[i][j] = 0
                for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:
                    dfs(m, row, col, x, y)
        
        r, c = len(grid), len(grid[0])
        m = [[1] * (3*c) for _ in range(3*r)]
        # build matrix
        for i in range(r):
            for j in range(c):
                if grid[i][j] == ' ': continue
                if grid[i][j] == '/': m[i*3][j*3+2] = m[i*3+1][j*3+1] = m[i*3+2][j*3] = 0
                else: m[i*3][j*3] = m[i*3+1][j*3+1] = m[i*3+2][j*3+2] = 0
         
        #count island
        rst = 0
        for i in range(3*r):
            for j in range(3*c):
                if m[i][j]:
                    rst += 1
                    dfs(m, 3*r, 3*c, i, j)
        return rst
```
Referrence: https://leetcode.com/problems/regions-cut-by-slashes/discuss/205719/Mark-the-boundary-and-then-the-problem-become-Number-of-Islands-(dfs-or-bfs)
Others: union-find - https://leetcode.com/problems/regions-cut-by-slashes/discuss/205680/JavaC%2B%2BPython-Split-4-parts-and-Union-Find
