**Get it Done, Make it Better, Share the Best -- Talse**
**I). DP**
| O(T): O(n) | O(S): O(n) | Rt: 40ms | 
```python
    def mincostTickets(self, days: List[int], costs: List[int]) -> int:
        l, day, c = days[-1]+1, set(days), costs
        dp = [0] * l
        for i in range(1, l):
            if i not in day: dp[i] = dp[i-1]
            else: dp[i] = min(dp[i-1] + c[0], dp[max(i-7, 0)] + c[1], dp[max(i-30, 0)] + c[2])
        return dp[-1]
```
Referrence: https://leetcode.com/problems/minimum-cost-for-tickets/discuss/226659/Two-DP-solutions-with-pictures

